
Final_Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b04  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002b04  00002b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fe0  00000000  00000000  00002b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c4d  00000000  00000000  00004b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000057c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005925  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a84c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <main>
      7a:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <ADC_init>:
#include"ADC_private.h"
#include"ADC_config.h"


void ADC_init(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	//Set prescaler to divide 128

	//ADCSRA &=init_pc;
	set_bit(ADCSRA,ADCSRA_ADPS2);
     c96:	a6 e2       	ldi	r26, 0x26	; 38
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e6 e2       	ldi	r30, 0x26	; 38
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	84 60       	ori	r24, 0x04	; 4
     ca2:	8c 93       	st	X, r24
	set_bit(ADCSRA,ADCSRA_ADPS1);
     ca4:	a6 e2       	ldi	r26, 0x26	; 38
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e6 e2       	ldi	r30, 0x26	; 38
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	82 60       	ori	r24, 0x02	; 2
     cb0:	8c 93       	st	X, r24
	set_bit(ADCSRA,ADCSRA_ADPS0);
     cb2:	a6 e2       	ldi	r26, 0x26	; 38
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e6 e2       	ldi	r30, 0x26	; 38
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	81 60       	ori	r24, 0x01	; 1
     cbe:	8c 93       	st	X, r24
	//ADCSRA |=ADC_PREC

	//AVCC as reference voltage
	set_bit(ADMUX,ADMUX_REFS0);
     cc0:	a7 e2       	ldi	r26, 0x27	; 39
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e7 e2       	ldi	r30, 0x27	; 39
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 64       	ori	r24, 0x40	; 64
     ccc:	8c 93       	st	X, r24
	clear_bit(ADMUX,ADMUX_REFS1);
     cce:	a7 e2       	ldi	r26, 0x27	; 39
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e2       	ldi	r30, 0x27	; 39
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 77       	andi	r24, 0x7F	; 127
     cda:	8c 93       	st	X, r24


	//activate left adjust result
	set_bit(ADMUX,ADMUX_ADLAR);
     cdc:	a7 e2       	ldi	r26, 0x27	; 39
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e7 e2       	ldi	r30, 0x27	; 39
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	80 62       	ori	r24, 0x20	; 32
     ce8:	8c 93       	st	X, r24

	//Enable peripheral
	set_bit(ADCSRA,ADCSRA_ADEN);
     cea:	a6 e2       	ldi	r26, 0x26	; 38
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e6 e2       	ldi	r30, 0x26	; 38
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	80 68       	ori	r24, 0x80	; 128
     cf6:	8c 93       	st	X, r24
}
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <ADC_ChannelReading>:
U8 ADC_ChannelReading(U8 channel)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	0f 92       	push	r0
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	89 83       	std	Y+1, r24	; 0x01
     //clear the mux bit in ADMUX register
	ADMUX &= 0b11100000;
     d0a:	a7 e2       	ldi	r26, 0x27	; 39
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e7 e2       	ldi	r30, 0x27	; 39
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	80 7e       	andi	r24, 0xE0	; 224
     d16:	8c 93       	st	X, r24
	ADMUX |= channel;
     d18:	a7 e2       	ldi	r26, 0x27	; 39
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e2       	ldi	r30, 0x27	; 39
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	90 81       	ld	r25, Z
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	89 2b       	or	r24, r25
     d26:	8c 93       	st	X, r24

	//start conversion
	set_bit(ADCSRA,ADCSRA_ADSC);
     d28:	a6 e2       	ldi	r26, 0x26	; 38
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e6 e2       	ldi	r30, 0x26	; 38
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 64       	ori	r24, 0x40	; 64
     d34:	8c 93       	st	X, r24

	//polling (busy waiting) until the conversion complete the flag
    while(get_bit(ADCSRA,ADCSRA_ADIF)==0);
     d36:	e6 e2       	ldi	r30, 0x26	; 38
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	82 95       	swap	r24
     d3e:	8f 70       	andi	r24, 0x0F	; 15
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	81 70       	andi	r24, 0x01	; 1
     d46:	90 70       	andi	r25, 0x00	; 0
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	a9 f3       	breq	.-22     	; 0xd36 <ADC_ChannelReading+0x38>

    //clear the conversion complete flag
    set_bit(ADCSRA,ADCSRA_ADIF);
     d4c:	a6 e2       	ldi	r26, 0x26	; 38
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e6 e2       	ldi	r30, 0x26	; 38
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	80 61       	ori	r24, 0x10	; 16
     d58:	8c 93       	st	X, r24

    return ADCH;
     d5a:	e5 e2       	ldi	r30, 0x25	; 37
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
}
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <ADC_Read_10>:


U16 ADC_Read_10(U8 channel){
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <ADC_Read_10+0x6>
     d6e:	0f 92       	push	r0
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX &= 0b11100000; // channel selection
     d76:	a7 e2       	ldi	r26, 0x27	; 39
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e7 e2       	ldi	r30, 0x27	; 39
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	80 7e       	andi	r24, 0xE0	; 224
     d82:	8c 93       	st	X, r24
	ADMUX |= channel;
     d84:	a7 e2       	ldi	r26, 0x27	; 39
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e7 e2       	ldi	r30, 0x27	; 39
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	90 81       	ld	r25, Z
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	89 2b       	or	r24, r25
     d92:	8c 93       	st	X, r24

	set_bit(ADCSRA,6); // start conversion(default single conversion)
     d94:	a6 e2       	ldi	r26, 0x26	; 38
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e6 e2       	ldi	r30, 0x26	; 38
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	80 64       	ori	r24, 0x40	; 64
     da0:	8c 93       	st	X, r24

	while(get_bit(ADCSRA,4)==0);
     da2:	e6 e2       	ldi	r30, 0x26	; 38
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	82 95       	swap	r24
     daa:	8f 70       	andi	r24, 0x0F	; 15
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	81 70       	andi	r24, 0x01	; 1
     db2:	90 70       	andi	r25, 0x00	; 0
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	a9 f3       	breq	.-22     	; 0xda2 <ADC_Read_10+0x3a>
	set_bit(ADCSRA,4);  //clear flag
     db8:	a6 e2       	ldi	r26, 0x26	; 38
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e6 e2       	ldi	r30, 0x26	; 38
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	80 61       	ori	r24, 0x10	; 16
     dc4:	8c 93       	st	X, r24
	U16 res = (ADCL>>6);
     dc6:	e4 e2       	ldi	r30, 0x24	; 36
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	82 95       	swap	r24
     dce:	86 95       	lsr	r24
     dd0:	86 95       	lsr	r24
     dd2:	83 70       	andi	r24, 0x03	; 3
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
	res |= (((U16)ADCH)<<2) ;
     ddc:	e5 e2       	ldi	r30, 0x25	; 37
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9c 01       	movw	r18, r24
     de8:	22 0f       	add	r18, r18
     dea:	33 1f       	adc	r19, r19
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	82 2b       	or	r24, r18
     df6:	93 2b       	or	r25, r19
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	return res;
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <DIO_set_pin_direction>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

U8 DIO_set_pin_direction(U8 port_NB,U8 pin_NB,U8 pin_direction)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	00 d0       	rcall	.+0      	; 0xe12 <DIO_set_pin_direction+0x6>
     e12:	00 d0       	rcall	.+0      	; 0xe14 <DIO_set_pin_direction+0x8>
     e14:	00 d0       	rcall	.+0      	; 0xe16 <DIO_set_pin_direction+0xa>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	8a 83       	std	Y+2, r24	; 0x02
     e1c:	6b 83       	std	Y+3, r22	; 0x03
     e1e:	4c 83       	std	Y+4, r20	; 0x04
U8 error_state = 0;
     e20:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	84 30       	cpi	r24, 0x04	; 4
     e26:	18 f0       	brcs	.+6      	; 0xe2e <DIO_set_pin_direction+0x22>
{
	error_state = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	e0 c0       	rjmp	.+448    	; 0xfee <DIO_set_pin_direction+0x1e2>
}
else if(pin_NB>=DIO_Max_pin_NB )
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	88 30       	cpi	r24, 0x08	; 8
     e32:	18 f0       	brcs	.+6      	; 0xe3a <DIO_set_pin_direction+0x2e>
{
	error_state = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	da c0       	rjmp	.+436    	; 0xfee <DIO_set_pin_direction+0x1e2>
}
else if((pin_direction !=DIO_Input) && (pin_direction!=DIO_Output))
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	88 23       	and	r24, r24
     e3e:	31 f0       	breq	.+12     	; 0xe4c <DIO_set_pin_direction+0x40>
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	19 f0       	breq	.+6      	; 0xe4c <DIO_set_pin_direction+0x40>
{
	error_state = 1;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	d1 c0       	rjmp	.+418    	; 0xfee <DIO_set_pin_direction+0x1e2>
}
else{
     switch(port_NB){
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	3e 83       	std	Y+6, r19	; 0x06
     e54:	2d 83       	std	Y+5, r18	; 0x05
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	9e 81       	ldd	r25, Y+6	; 0x06
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	91 05       	cpc	r25, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <DIO_set_pin_direction+0x56>
     e60:	43 c0       	rjmp	.+134    	; 0xee8 <DIO_set_pin_direction+0xdc>
     e62:	2d 81       	ldd	r18, Y+5	; 0x05
     e64:	3e 81       	ldd	r19, Y+6	; 0x06
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <DIO_set_pin_direction+0x6a>
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	71 f0       	breq	.+28     	; 0xe90 <DIO_set_pin_direction+0x84>
     e74:	bc c0       	rjmp	.+376    	; 0xfee <DIO_set_pin_direction+0x1e2>
     e76:	2d 81       	ldd	r18, Y+5	; 0x05
     e78:	3e 81       	ldd	r19, Y+6	; 0x06
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <DIO_set_pin_direction+0x76>
     e80:	5f c0       	rjmp	.+190    	; 0xf40 <DIO_set_pin_direction+0x134>
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <DIO_set_pin_direction+0x82>
     e8c:	85 c0       	rjmp	.+266    	; 0xf98 <DIO_set_pin_direction+0x18c>
     e8e:	af c0       	rjmp	.+350    	; 0xfee <DIO_set_pin_direction+0x1e2>
      case Group_A:
	   assign_bit(DIO_U8_DDRA,pin_NB,pin_direction);
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	a1 f4       	brne	.+40     	; 0xebe <DIO_set_pin_direction+0xb2>
     e96:	aa e3       	ldi	r26, 0x3A	; 58
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	ea e3       	ldi	r30, 0x3A	; 58
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_set_pin_direction+0xa8>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_set_pin_direction+0xa4>
     eb8:	84 2b       	or	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	98 c0       	rjmp	.+304    	; 0xfee <DIO_set_pin_direction+0x1e2>
     ebe:	aa e3       	ldi	r26, 0x3A	; 58
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	ea e3       	ldi	r30, 0x3A	; 58
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_set_pin_direction+0xd0>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_set_pin_direction+0xcc>
     ee0:	80 95       	com	r24
     ee2:	84 23       	and	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	83 c0       	rjmp	.+262    	; 0xfee <DIO_set_pin_direction+0x1e2>
	   break;
	   case Group_B:
	   assign_bit(DIO_U8_DDRB,pin_NB,pin_direction);
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	a1 f4       	brne	.+40     	; 0xf16 <DIO_set_pin_direction+0x10a>
     eee:	a7 e3       	ldi	r26, 0x37	; 55
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e7 e3       	ldi	r30, 0x37	; 55
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_set_pin_direction+0x100>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_set_pin_direction+0xfc>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	6c c0       	rjmp	.+216    	; 0xfee <DIO_set_pin_direction+0x1e2>
     f16:	a7 e3       	ldi	r26, 0x37	; 55
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e3       	ldi	r30, 0x37	; 55
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_set_pin_direction+0x128>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_set_pin_direction+0x124>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	57 c0       	rjmp	.+174    	; 0xfee <DIO_set_pin_direction+0x1e2>
	   break;
     case Group_C:
	   assign_bit(DIO_U8_DDRC,pin_NB,pin_direction);
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	a1 f4       	brne	.+40     	; 0xf6e <DIO_set_pin_direction+0x162>
     f46:	a4 e3       	ldi	r26, 0x34	; 52
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e4 e3       	ldi	r30, 0x34	; 52
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_set_pin_direction+0x158>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_set_pin_direction+0x154>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	40 c0       	rjmp	.+128    	; 0xfee <DIO_set_pin_direction+0x1e2>
     f6e:	a4 e3       	ldi	r26, 0x34	; 52
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e4 e3       	ldi	r30, 0x34	; 52
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_set_pin_direction+0x180>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_set_pin_direction+0x17c>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	2b c0       	rjmp	.+86     	; 0xfee <DIO_set_pin_direction+0x1e2>
	   break;
     case Group_D:
	   assign_bit(DIO_U8_DDRD,pin_NB,pin_direction);
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	a1 f4       	brne	.+40     	; 0xfc6 <DIO_set_pin_direction+0x1ba>
     f9e:	a1 e3       	ldi	r26, 0x31	; 49
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e1 e3       	ldi	r30, 0x31	; 49
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_set_pin_direction+0x1b0>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_set_pin_direction+0x1ac>
     fc0:	84 2b       	or	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	14 c0       	rjmp	.+40     	; 0xfee <DIO_set_pin_direction+0x1e2>
     fc6:	a1 e3       	ldi	r26, 0x31	; 49
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e1 e3       	ldi	r30, 0x31	; 49
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_set_pin_direction+0x1d8>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_set_pin_direction+0x1d4>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
	   break;
}
}

return error_state;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff0:	26 96       	adiw	r28, 0x06	; 6
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <DIO_set_pin_value>:


U8 DIO_set_pin_value(U8 port_NB,U8 pin_NB,U8 pin_value)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <DIO_set_pin_value+0x6>
    1008:	00 d0       	rcall	.+0      	; 0x100a <DIO_set_pin_value+0x8>
    100a:	00 d0       	rcall	.+0      	; 0x100c <DIO_set_pin_value+0xa>
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	6b 83       	std	Y+3, r22	; 0x03
    1014:	4c 83       	std	Y+4, r20	; 0x04
U8 error_state = 0;
    1016:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	84 30       	cpi	r24, 0x04	; 4
    101c:	18 f0       	brcs	.+6      	; 0x1024 <DIO_set_pin_value+0x22>
{
	error_state = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	e0 c0       	rjmp	.+448    	; 0x11e4 <DIO_set_pin_value+0x1e2>
}
else if(pin_NB>=DIO_Max_pin_NB)
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	18 f0       	brcs	.+6      	; 0x1030 <DIO_set_pin_value+0x2e>
{
	error_state = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	da c0       	rjmp	.+436    	; 0x11e4 <DIO_set_pin_value+0x1e2>
}
else if((pin_value!=DIO_High) && (pin_value!=DIO_Low))
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	31 f0       	breq	.+12     	; 0x1042 <DIO_set_pin_value+0x40>
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	88 23       	and	r24, r24
    103a:	19 f0       	breq	.+6      	; 0x1042 <DIO_set_pin_value+0x40>
{
	error_state = 1;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	d1 c0       	rjmp	.+418    	; 0x11e4 <DIO_set_pin_value+0x1e2>
}
else{
     switch(port_NB){
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3e 83       	std	Y+6, r19	; 0x06
    104a:	2d 83       	std	Y+5, r18	; 0x05
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	09 f4       	brne	.+2      	; 0x1058 <DIO_set_pin_value+0x56>
    1056:	43 c0       	rjmp	.+134    	; 0x10de <DIO_set_pin_value+0xdc>
    1058:	2d 81       	ldd	r18, Y+5	; 0x05
    105a:	3e 81       	ldd	r19, Y+6	; 0x06
    105c:	22 30       	cpi	r18, 0x02	; 2
    105e:	31 05       	cpc	r19, r1
    1060:	2c f4       	brge	.+10     	; 0x106c <DIO_set_pin_value+0x6a>
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	71 f0       	breq	.+28     	; 0x1086 <DIO_set_pin_value+0x84>
    106a:	bc c0       	rjmp	.+376    	; 0x11e4 <DIO_set_pin_value+0x1e2>
    106c:	2d 81       	ldd	r18, Y+5	; 0x05
    106e:	3e 81       	ldd	r19, Y+6	; 0x06
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <DIO_set_pin_value+0x76>
    1076:	5f c0       	rjmp	.+190    	; 0x1136 <DIO_set_pin_value+0x134>
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <DIO_set_pin_value+0x82>
    1082:	85 c0       	rjmp	.+266    	; 0x118e <DIO_set_pin_value+0x18c>
    1084:	af c0       	rjmp	.+350    	; 0x11e4 <DIO_set_pin_value+0x1e2>
      case Group_A:
	   assign_bit(DIO_U8_PORTA,pin_NB,pin_value);
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	a1 f4       	brne	.+40     	; 0x10b4 <DIO_set_pin_value+0xb2>
    108c:	ab e3       	ldi	r26, 0x3B	; 59
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	eb e3       	ldi	r30, 0x3B	; 59
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_set_pin_value+0xa8>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_set_pin_value+0xa4>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	98 c0       	rjmp	.+304    	; 0x11e4 <DIO_set_pin_value+0x1e2>
    10b4:	ab e3       	ldi	r26, 0x3B	; 59
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	eb e3       	ldi	r30, 0x3B	; 59
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_set_pin_value+0xd0>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_set_pin_value+0xcc>
    10d6:	80 95       	com	r24
    10d8:	84 23       	and	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	83 c0       	rjmp	.+262    	; 0x11e4 <DIO_set_pin_value+0x1e2>
	   break;
	   case Group_B:
	   assign_bit(DIO_U8_PORTB,pin_NB,pin_value);
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	a1 f4       	brne	.+40     	; 0x110c <DIO_set_pin_value+0x10a>
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_set_pin_value+0x100>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_set_pin_value+0xfc>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	6c c0       	rjmp	.+216    	; 0x11e4 <DIO_set_pin_value+0x1e2>
    110c:	a8 e3       	ldi	r26, 0x38	; 56
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e3       	ldi	r30, 0x38	; 56
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_set_pin_value+0x128>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_set_pin_value+0x124>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	57 c0       	rjmp	.+174    	; 0x11e4 <DIO_set_pin_value+0x1e2>
	   break;
     case Group_C:
	   assign_bit(DIO_U8_PORTC,pin_NB,pin_value);
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	a1 f4       	brne	.+40     	; 0x1164 <DIO_set_pin_value+0x162>
    113c:	a5 e3       	ldi	r26, 0x35	; 53
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e3       	ldi	r30, 0x35	; 53
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_set_pin_value+0x158>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_set_pin_value+0x154>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	40 c0       	rjmp	.+128    	; 0x11e4 <DIO_set_pin_value+0x1e2>
    1164:	a5 e3       	ldi	r26, 0x35	; 53
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e5 e3       	ldi	r30, 0x35	; 53
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_set_pin_value+0x180>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_set_pin_value+0x17c>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	2b c0       	rjmp	.+86     	; 0x11e4 <DIO_set_pin_value+0x1e2>
	   break;
     case Group_D:
	   assign_bit(DIO_U8_PORTD,pin_NB,pin_value);
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	a1 f4       	brne	.+40     	; 0x11bc <DIO_set_pin_value+0x1ba>
    1194:	a2 e3       	ldi	r26, 0x32	; 50
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_set_pin_value+0x1b0>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_set_pin_value+0x1ac>
    11b6:	84 2b       	or	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <DIO_set_pin_value+0x1e2>
    11bc:	a2 e3       	ldi	r26, 0x32	; 50
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e2 e3       	ldi	r30, 0x32	; 50
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_set_pin_value+0x1d8>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_set_pin_value+0x1d4>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
	   break;
     }
}


return error_state;
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e6:	26 96       	adiw	r28, 0x06	; 6
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <DIO_set_port_value>:


U8 DIO_set_port_value(U8 port_NB,U8 port_value)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <DIO_set_port_value+0x6>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <DIO_set_port_value+0x8>
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	8a 83       	std	Y+2, r24	; 0x02
    1208:	6b 83       	std	Y+3, r22	; 0x03
U8 error_state = 0;
    120a:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	18 f0       	brcs	.+6      	; 0x1218 <DIO_set_port_value+0x20>
{
	error_state = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	32 c0       	rjmp	.+100    	; 0x127c <DIO_set_port_value+0x84>
else if(port_value>DIO_Max_port_value)
{
	error_state = 1;
}
else{
     switch(port_NB){
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3d 83       	std	Y+5, r19	; 0x05
    1220:	2c 83       	std	Y+4, r18	; 0x04
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	d1 f0       	breq	.+52     	; 0x1260 <DIO_set_port_value+0x68>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	2c f4       	brge	.+10     	; 0x1240 <DIO_set_port_value+0x48>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	61 f0       	breq	.+24     	; 0x1256 <DIO_set_port_value+0x5e>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <DIO_set_port_value+0x84>
    1240:	2c 81       	ldd	r18, Y+4	; 0x04
    1242:	3d 81       	ldd	r19, Y+5	; 0x05
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <DIO_set_port_value+0x72>
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <DIO_set_port_value+0x7c>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <DIO_set_port_value+0x84>
      case Group_A:
    	  DIO_U8_PORTA = port_value;
    1256:	eb e3       	ldi	r30, 0x3B	; 59
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	80 83       	st	Z, r24
    125e:	0e c0       	rjmp	.+28     	; 0x127c <DIO_set_port_value+0x84>
	   break;
	   case Group_B:
		   DIO_U8_PORTB = port_value;
    1260:	e8 e3       	ldi	r30, 0x38	; 56
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	80 83       	st	Z, r24
    1268:	09 c0       	rjmp	.+18     	; 0x127c <DIO_set_port_value+0x84>
	   break;
     case Group_C:
    	 DIO_U8_PORTC = port_value;
    126a:	e5 e3       	ldi	r30, 0x35	; 53
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	80 83       	st	Z, r24
    1272:	04 c0       	rjmp	.+8      	; 0x127c <DIO_set_port_value+0x84>
	   break;
     case Group_D:
    	 DIO_U8_PORTD = port_value;
    1274:	e2 e3       	ldi	r30, 0x32	; 50
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	80 83       	st	Z, r24
	   break;
     }
}


return error_state;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <DIO_set_port_direction>:


U8 DIO_set_port_direction(U8 port_NB, U8 port_direction)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <DIO_set_port_direction+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <DIO_set_port_direction+0x8>
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	8a 83       	std	Y+2, r24	; 0x02
    129e:	6b 83       	std	Y+3, r22	; 0x03
U8 error_state = 0;
    12a0:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	18 f0       	brcs	.+6      	; 0x12ae <DIO_set_port_direction+0x20>
{
	error_state = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	32 c0       	rjmp	.+100    	; 0x1312 <DIO_set_port_direction+0x84>
else if( port_direction>DIO_Max_port_direction )
{
	error_state = 1;
}
else{
     switch(port_NB){
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3d 83       	std	Y+5, r19	; 0x05
    12b6:	2c 83       	std	Y+4, r18	; 0x04
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	9d 81       	ldd	r25, Y+5	; 0x05
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	91 05       	cpc	r25, r1
    12c0:	d1 f0       	breq	.+52     	; 0x12f6 <DIO_set_port_direction+0x68>
    12c2:	2c 81       	ldd	r18, Y+4	; 0x04
    12c4:	3d 81       	ldd	r19, Y+5	; 0x05
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <DIO_set_port_direction+0x48>
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	9d 81       	ldd	r25, Y+5	; 0x05
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	61 f0       	breq	.+24     	; 0x12ec <DIO_set_port_direction+0x5e>
    12d4:	1e c0       	rjmp	.+60     	; 0x1312 <DIO_set_port_direction+0x84>
    12d6:	2c 81       	ldd	r18, Y+4	; 0x04
    12d8:	3d 81       	ldd	r19, Y+5	; 0x05
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	81 f0       	breq	.+32     	; 0x1300 <DIO_set_port_direction+0x72>
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	9d 81       	ldd	r25, Y+5	; 0x05
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	81 f0       	breq	.+32     	; 0x130a <DIO_set_port_direction+0x7c>
    12ea:	13 c0       	rjmp	.+38     	; 0x1312 <DIO_set_port_direction+0x84>
      case Group_A:
    	  DIO_U8_DDRA = port_direction;
    12ec:	ea e3       	ldi	r30, 0x3A	; 58
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	80 83       	st	Z, r24
    12f4:	0e c0       	rjmp	.+28     	; 0x1312 <DIO_set_port_direction+0x84>
	   break;
	   case Group_B:
		   DIO_U8_DDRB = port_direction;
    12f6:	e7 e3       	ldi	r30, 0x37	; 55
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	80 83       	st	Z, r24
    12fe:	09 c0       	rjmp	.+18     	; 0x1312 <DIO_set_port_direction+0x84>
	   break;
     case Group_C:
    	 DIO_U8_DDRC = port_direction;
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	80 83       	st	Z, r24
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <DIO_set_port_direction+0x84>
	   break;
     case Group_D:
    	 DIO_U8_DDRD = port_direction;
    130a:	e1 e3       	ldi	r30, 0x31	; 49
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	80 83       	st	Z, r24
	   break;
     }
}


return error_state;
    1312:	89 81       	ldd	r24, Y+1	; 0x01
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <DIO_get_pin_value>:



U8 DIO_get_pin_value(U8 port_NB,U8  pin_NB,U8 * pin_value)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	27 97       	sbiw	r28, 0x07	; 7
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	8a 83       	std	Y+2, r24	; 0x02
    133a:	6b 83       	std	Y+3, r22	; 0x03
    133c:	5d 83       	std	Y+5, r21	; 0x05
    133e:	4c 83       	std	Y+4, r20	; 0x04
U8 error_state = 0;
    1340:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	18 f0       	brcs	.+6      	; 0x134e <DIO_get_pin_value+0x2a>
{
	error_state = 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	76 c0       	rjmp	.+236    	; 0x143a <DIO_get_pin_value+0x116>
}
else if(pin_NB>=DIO_Max_pin_NB)
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	18 f0       	brcs	.+6      	; 0x135a <DIO_get_pin_value+0x36>
{
	error_state = 1;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	70 c0       	rjmp	.+224    	; 0x143a <DIO_get_pin_value+0x116>
}

else{
     switch(port_NB){
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3f 83       	std	Y+7, r19	; 0x07
    1362:	2e 83       	std	Y+6, r18	; 0x06
    1364:	4e 81       	ldd	r20, Y+6	; 0x06
    1366:	5f 81       	ldd	r21, Y+7	; 0x07
    1368:	41 30       	cpi	r20, 0x01	; 1
    136a:	51 05       	cpc	r21, r1
    136c:	59 f1       	breq	.+86     	; 0x13c4 <DIO_get_pin_value+0xa0>
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	9f 81       	ldd	r25, Y+7	; 0x07
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	91 05       	cpc	r25, r1
    1376:	34 f4       	brge	.+12     	; 0x1384 <DIO_get_pin_value+0x60>
    1378:	2e 81       	ldd	r18, Y+6	; 0x06
    137a:	3f 81       	ldd	r19, Y+7	; 0x07
    137c:	21 15       	cp	r18, r1
    137e:	31 05       	cpc	r19, r1
    1380:	69 f0       	breq	.+26     	; 0x139c <DIO_get_pin_value+0x78>
    1382:	5b c0       	rjmp	.+182    	; 0x143a <DIO_get_pin_value+0x116>
    1384:	4e 81       	ldd	r20, Y+6	; 0x06
    1386:	5f 81       	ldd	r21, Y+7	; 0x07
    1388:	42 30       	cpi	r20, 0x02	; 2
    138a:	51 05       	cpc	r21, r1
    138c:	79 f1       	breq	.+94     	; 0x13ec <DIO_get_pin_value+0xc8>
    138e:	8e 81       	ldd	r24, Y+6	; 0x06
    1390:	9f 81       	ldd	r25, Y+7	; 0x07
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <DIO_get_pin_value+0x76>
    1398:	3d c0       	rjmp	.+122    	; 0x1414 <DIO_get_pin_value+0xf0>
    139a:	4f c0       	rjmp	.+158    	; 0x143a <DIO_get_pin_value+0x116>
      case Group_A:
    	  * pin_value = get_bit(DIO_U8_PINA,pin_NB);
    139c:	e9 e3       	ldi	r30, 0x39	; 57
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a9 01       	movw	r20, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_get_pin_value+0x90>
    13b0:	55 95       	asr	r21
    13b2:	47 95       	ror	r20
    13b4:	8a 95       	dec	r24
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_get_pin_value+0x8c>
    13b8:	ca 01       	movw	r24, r20
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	ec 81       	ldd	r30, Y+4	; 0x04
    13be:	fd 81       	ldd	r31, Y+5	; 0x05
    13c0:	80 83       	st	Z, r24
    13c2:	3b c0       	rjmp	.+118    	; 0x143a <DIO_get_pin_value+0x116>
	   break;
	   case Group_B:
		   * pin_value=get_bit(DIO_U8_PINB,pin_NB);
    13c4:	e6 e3       	ldi	r30, 0x36	; 54
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_get_pin_value+0xb8>
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_get_pin_value+0xb4>
    13e0:	ca 01       	movw	r24, r20
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	ec 81       	ldd	r30, Y+4	; 0x04
    13e6:	fd 81       	ldd	r31, Y+5	; 0x05
    13e8:	80 83       	st	Z, r24
    13ea:	27 c0       	rjmp	.+78     	; 0x143a <DIO_get_pin_value+0x116>
	   break;
     case Group_C:
    	 * pin_value=get_bit(DIO_U8_PINC,pin_NB);
    13ec:	e3 e3       	ldi	r30, 0x33	; 51
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a9 01       	movw	r20, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_get_pin_value+0xe0>
    1400:	55 95       	asr	r21
    1402:	47 95       	ror	r20
    1404:	8a 95       	dec	r24
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_get_pin_value+0xdc>
    1408:	ca 01       	movw	r24, r20
    140a:	81 70       	andi	r24, 0x01	; 1
    140c:	ec 81       	ldd	r30, Y+4	; 0x04
    140e:	fd 81       	ldd	r31, Y+5	; 0x05
    1410:	80 83       	st	Z, r24
    1412:	13 c0       	rjmp	.+38     	; 0x143a <DIO_get_pin_value+0x116>
	   break;
     case Group_D:
    	 * pin_value=get_bit(DIO_U8_PIND,pin_NB);
    1414:	e0 e3       	ldi	r30, 0x30	; 48
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a9 01       	movw	r20, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_get_pin_value+0x108>
    1428:	55 95       	asr	r21
    142a:	47 95       	ror	r20
    142c:	8a 95       	dec	r24
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_get_pin_value+0x104>
    1430:	ca 01       	movw	r24, r20
    1432:	81 70       	andi	r24, 0x01	; 1
    1434:	ec 81       	ldd	r30, Y+4	; 0x04
    1436:	fd 81       	ldd	r31, Y+5	; 0x05
    1438:	80 83       	st	Z, r24
	   break;
     }

}
return error_state;
    143a:	89 81       	ldd	r24, Y+1	; 0x01
}
    143c:	27 96       	adiw	r28, 0x07	; 7
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <LCD_write_cmd>:
#include "LCD_private.h"
#include "LCD_interface.h"


void LCD_write_cmd(U8 cmd)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	89 83       	std	Y+1, r24	; 0x01
    DIO_set_pin_value(LCD_control_port, LCD_rs_pin, DIO_Low );
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	62 e0       	ldi	r22, 0x02	; 2
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_set_pin_value>
	LCD_write(cmd);
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LCD_write>
}
    146a:	0f 90       	pop	r0
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <LCD_write_data>:

void LCD_write_data(U8 data)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
    DIO_set_pin_value( LCD_control_port, LCD_rs_pin, DIO_High );
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	62 e0       	ldi	r22, 0x02	; 2
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_set_pin_value>
	LCD_write(data);
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LCD_write>
}
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <LCD_write>:


void LCD_write(U8 value)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	61 97       	sbiw	r28, 0x11	; 17
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	89 8b       	std	Y+17, r24	; 0x11
	DIO_set_pin_value(LCD_control_port,LCD_rw_pin, DIO_Low );
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_set_pin_value>

	for(int i=0;i<8;i++)
    14b6:	18 8a       	std	Y+16, r1	; 0x10
    14b8:	1f 86       	std	Y+15, r1	; 0x0f
    14ba:	16 c0       	rjmp	.+44     	; 0x14e8 <LCD_write+0x52>
	{
		DIO_set_pin_value(LCD_data_port, i , get_bit( value,i));
    14bc:	2f 85       	ldd	r18, Y+15	; 0x0f
    14be:	89 89       	ldd	r24, Y+17	; 0x11
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0f 84       	ldd	r0, Y+15	; 0x0f
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <LCD_write+0x36>
    14c8:	95 95       	asr	r25
    14ca:	87 95       	ror	r24
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <LCD_write+0x32>
    14d0:	98 2f       	mov	r25, r24
    14d2:	91 70       	andi	r25, 0x01	; 1
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	62 2f       	mov	r22, r18
    14d8:	49 2f       	mov	r20, r25
    14da:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_set_pin_value>

void LCD_write(U8 value)
{
	DIO_set_pin_value(LCD_control_port,LCD_rw_pin, DIO_Low );

	for(int i=0;i<8;i++)
    14de:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e0:	98 89       	ldd	r25, Y+16	; 0x10
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	98 8b       	std	Y+16, r25	; 0x10
    14e6:	8f 87       	std	Y+15, r24	; 0x0f
    14e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ea:	98 89       	ldd	r25, Y+16	; 0x10
    14ec:	88 30       	cpi	r24, 0x08	; 8
    14ee:	91 05       	cpc	r25, r1
    14f0:	2c f3       	brlt	.-54     	; 0x14bc <LCD_write+0x26>
	{
		DIO_set_pin_value(LCD_data_port, i , get_bit( value,i));

	}

	DIO_set_pin_value(LCD_control_port,LCD_E_pin, DIO_High);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	41 e0       	ldi	r20, 0x01	; 1
    14f8:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_set_pin_value>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e8       	ldi	r26, 0x80	; 128
    1502:	bf e3       	ldi	r27, 0x3F	; 63
    1504:	8b 87       	std	Y+11, r24	; 0x0b
    1506:	9c 87       	std	Y+12, r25	; 0x0c
    1508:	ad 87       	std	Y+13, r26	; 0x0d
    150a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150c:	6b 85       	ldd	r22, Y+11	; 0x0b
    150e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1510:	8d 85       	ldd	r24, Y+13	; 0x0d
    1512:	9e 85       	ldd	r25, Y+14	; 0x0e
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	4a ef       	ldi	r20, 0xFA	; 250
    151a:	54 e4       	ldi	r21, 0x44	; 68
    151c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	8f 83       	std	Y+7, r24	; 0x07
    1526:	98 87       	std	Y+8, r25	; 0x08
    1528:	a9 87       	std	Y+9, r26	; 0x09
    152a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1540:	88 23       	and	r24, r24
    1542:	2c f4       	brge	.+10     	; 0x154e <LCD_write+0xb8>
		__ticks = 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	3f c0       	rjmp	.+126    	; 0x15cc <LCD_write+0x136>
	else if (__tmp > 65535)
    154e:	6f 81       	ldd	r22, Y+7	; 0x07
    1550:	78 85       	ldd	r23, Y+8	; 0x08
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	9a 85       	ldd	r25, Y+10	; 0x0a
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	3f ef       	ldi	r19, 0xFF	; 255
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	57 e4       	ldi	r21, 0x47	; 71
    155e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1562:	18 16       	cp	r1, r24
    1564:	4c f5       	brge	.+82     	; 0x15b8 <LCD_write+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1566:	6b 85       	ldd	r22, Y+11	; 0x0b
    1568:	7c 85       	ldd	r23, Y+12	; 0x0c
    156a:	8d 85       	ldd	r24, Y+13	; 0x0d
    156c:	9e 85       	ldd	r25, Y+14	; 0x0e
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e2       	ldi	r20, 0x20	; 32
    1574:	51 e4       	ldi	r21, 0x41	; 65
    1576:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
    158e:	0f c0       	rjmp	.+30     	; 0x15ae <LCD_write+0x118>
    1590:	88 ec       	ldi	r24, 0xC8	; 200
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <LCD_write+0x106>
    15a0:	9c 83       	std	Y+4, r25	; 0x04
    15a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	69 f7       	brne	.-38     	; 0x1590 <LCD_write+0xfa>
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <LCD_write+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ba:	78 85       	ldd	r23, Y+8	; 0x08
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <LCD_write+0x142>
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_set_pin_value(LCD_control_port,LCD_E_pin,  DIO_Low);
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_set_pin_value>
}
    15ea:	61 96       	adiw	r28, 0x11	; 17
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <LCD_initial>:

void LCD_initial(void)
{
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	cc 54       	subi	r28, 0x4C	; 76
    160a:	d0 40       	sbci	r29, 0x00	; 0
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
	DIO_set_port_direction(LCD_data_port, DIO_Max_port_direction);
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	6f ef       	ldi	r22, 0xFF	; 255
    161a:	0e 94 47 09 	call	0x128e	; 0x128e <DIO_set_port_direction>

	DIO_set_pin_direction(LCD_control_port ,LCD_rs_pin ,DIO_Output);
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_set_pin_direction>

    DIO_set_pin_direction(LCD_control_port,LCD_rw_pin,DIO_Output);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	41 e0       	ldi	r20, 0x01	; 1
    162e:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_set_pin_direction>

    DIO_set_pin_direction(LCD_control_port,LCD_E_pin,DIO_Output);
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	41 e0       	ldi	r20, 0x01	; 1
    1638:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_set_pin_direction>
    163c:	fe 01       	movw	r30, r28
    163e:	e7 5b       	subi	r30, 0xB7	; 183
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a0 e2       	ldi	r26, 0x20	; 32
    1648:	b2 e4       	ldi	r27, 0x42	; 66
    164a:	80 83       	st	Z, r24
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	a2 83       	std	Z+2, r26	; 0x02
    1650:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1652:	8e 01       	movw	r16, r28
    1654:	0b 5b       	subi	r16, 0xBB	; 187
    1656:	1f 4f       	sbci	r17, 0xFF	; 255
    1658:	fe 01       	movw	r30, r28
    165a:	e7 5b       	subi	r30, 0xB7	; 183
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4a ef       	ldi	r20, 0xFA	; 250
    166c:	54 e4       	ldi	r21, 0x44	; 68
    166e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	f8 01       	movw	r30, r16
    1678:	80 83       	st	Z, r24
    167a:	91 83       	std	Z+1, r25	; 0x01
    167c:	a2 83       	std	Z+2, r26	; 0x02
    167e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1680:	fe 01       	movw	r30, r28
    1682:	eb 5b       	subi	r30, 0xBB	; 187
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	60 81       	ld	r22, Z
    1688:	71 81       	ldd	r23, Z+1	; 0x01
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    169a:	88 23       	and	r24, r24
    169c:	44 f4       	brge	.+16     	; 0x16ae <LCD_initial+0xb2>
		__ticks = 1;
    169e:	fe 01       	movw	r30, r28
    16a0:	ed 5b       	subi	r30, 0xBD	; 189
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	80 83       	st	Z, r24
    16ac:	64 c0       	rjmp	.+200    	; 0x1776 <LCD_initial+0x17a>
	else if (__tmp > 65535)
    16ae:	fe 01       	movw	r30, r28
    16b0:	eb 5b       	subi	r30, 0xBB	; 187
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	3f ef       	ldi	r19, 0xFF	; 255
    16c0:	4f e7       	ldi	r20, 0x7F	; 127
    16c2:	57 e4       	ldi	r21, 0x47	; 71
    16c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	0c f0       	brlt	.+2      	; 0x16ce <LCD_initial+0xd2>
    16cc:	43 c0       	rjmp	.+134    	; 0x1754 <LCD_initial+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ce:	fe 01       	movw	r30, r28
    16d0:	e7 5b       	subi	r30, 0xB7	; 183
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	60 81       	ld	r22, Z
    16d6:	71 81       	ldd	r23, Z+1	; 0x01
    16d8:	82 81       	ldd	r24, Z+2	; 0x02
    16da:	93 81       	ldd	r25, Z+3	; 0x03
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	8e 01       	movw	r16, r28
    16ee:	0d 5b       	subi	r16, 0xBD	; 189
    16f0:	1f 4f       	sbci	r17, 0xFF	; 255
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	f8 01       	movw	r30, r16
    1700:	91 83       	std	Z+1, r25	; 0x01
    1702:	80 83       	st	Z, r24
    1704:	1f c0       	rjmp	.+62     	; 0x1744 <LCD_initial+0x148>
    1706:	fe 01       	movw	r30, r28
    1708:	ef 5b       	subi	r30, 0xBF	; 191
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	80 83       	st	Z, r24
    1714:	fe 01       	movw	r30, r28
    1716:	ef 5b       	subi	r30, 0xBF	; 191
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <LCD_initial+0x122>
    1722:	fe 01       	movw	r30, r28
    1724:	ef 5b       	subi	r30, 0xBF	; 191
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172c:	de 01       	movw	r26, r28
    172e:	ad 5b       	subi	r26, 0xBD	; 189
    1730:	bf 4f       	sbci	r27, 0xFF	; 255
    1732:	fe 01       	movw	r30, r28
    1734:	ed 5b       	subi	r30, 0xBD	; 189
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	11 96       	adiw	r26, 0x01	; 1
    1740:	9c 93       	st	X, r25
    1742:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1744:	fe 01       	movw	r30, r28
    1746:	ed 5b       	subi	r30, 0xBD	; 189
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	d1 f6       	brne	.-76     	; 0x1706 <LCD_initial+0x10a>
    1752:	24 c0       	rjmp	.+72     	; 0x179c <LCD_initial+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1754:	8e 01       	movw	r16, r28
    1756:	0d 5b       	subi	r16, 0xBD	; 189
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	fe 01       	movw	r30, r28
    175c:	eb 5b       	subi	r30, 0xBB	; 187
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	f8 01       	movw	r30, r16
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	80 83       	st	Z, r24
    1776:	fe 01       	movw	r30, r28
    1778:	ed 5b       	subi	r30, 0xBD	; 189
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	fe 01       	movw	r30, r28
    1782:	ff 96       	adiw	r30, 0x3f	; 63
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
    1788:	fe 01       	movw	r30, r28
    178a:	ff 96       	adiw	r30, 0x3f	; 63
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <LCD_initial+0x194>
    1794:	fe 01       	movw	r30, r28
    1796:	ff 96       	adiw	r30, 0x3f	; 63
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24

    _delay_ms(40);
    LCD_write_cmd(0b00111000);
    179c:	88 e3       	ldi	r24, 0x38	; 56
    179e:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_write_cmd>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a8 e4       	ldi	r26, 0x48	; 72
    17a8:	b2 e4       	ldi	r27, 0x42	; 66
    17aa:	8b af       	std	Y+59, r24	; 0x3b
    17ac:	9c af       	std	Y+60, r25	; 0x3c
    17ae:	ad af       	std	Y+61, r26	; 0x3d
    17b0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17b2:	6b ad       	ldd	r22, Y+59	; 0x3b
    17b4:	7c ad       	ldd	r23, Y+60	; 0x3c
    17b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ba:	2b ea       	ldi	r18, 0xAB	; 171
    17bc:	3a ea       	ldi	r19, 0xAA	; 170
    17be:	4a e2       	ldi	r20, 0x2A	; 42
    17c0:	50 e4       	ldi	r21, 0x40	; 64
    17c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8f ab       	std	Y+55, r24	; 0x37
    17cc:	98 af       	std	Y+56, r25	; 0x38
    17ce:	a9 af       	std	Y+57, r26	; 0x39
    17d0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    17d2:	6f a9       	ldd	r22, Y+55	; 0x37
    17d4:	78 ad       	ldd	r23, Y+56	; 0x38
    17d6:	89 ad       	ldd	r24, Y+57	; 0x39
    17d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e8       	ldi	r20, 0x80	; 128
    17e0:	5f e3       	ldi	r21, 0x3F	; 63
    17e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17e6:	88 23       	and	r24, r24
    17e8:	1c f4       	brge	.+6      	; 0x17f0 <LCD_initial+0x1f4>
		__ticks = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	8e ab       	std	Y+54, r24	; 0x36
    17ee:	91 c0       	rjmp	.+290    	; 0x1912 <LCD_initial+0x316>
	else if (__tmp > 255)
    17f0:	6f a9       	ldd	r22, Y+55	; 0x37
    17f2:	78 ad       	ldd	r23, Y+56	; 0x38
    17f4:	89 ad       	ldd	r24, Y+57	; 0x39
    17f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4f e7       	ldi	r20, 0x7F	; 127
    17fe:	53 e4       	ldi	r21, 0x43	; 67
    1800:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1804:	18 16       	cp	r1, r24
    1806:	0c f0       	brlt	.+2      	; 0x180a <LCD_initial+0x20e>
    1808:	7b c0       	rjmp	.+246    	; 0x1900 <LCD_initial+0x304>
	{
		_delay_ms(__us / 1000.0);
    180a:	6b ad       	ldd	r22, Y+59	; 0x3b
    180c:	7c ad       	ldd	r23, Y+60	; 0x3c
    180e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1810:	9e ad       	ldd	r25, Y+62	; 0x3e
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a e7       	ldi	r20, 0x7A	; 122
    1818:	54 e4       	ldi	r21, 0x44	; 68
    181a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8a ab       	std	Y+50, r24	; 0x32
    1824:	9b ab       	std	Y+51, r25	; 0x33
    1826:	ac ab       	std	Y+52, r26	; 0x34
    1828:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182a:	6a a9       	ldd	r22, Y+50	; 0x32
    182c:	7b a9       	ldd	r23, Y+51	; 0x33
    182e:	8c a9       	ldd	r24, Y+52	; 0x34
    1830:	9d a9       	ldd	r25, Y+53	; 0x35
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	4a ef       	ldi	r20, 0xFA	; 250
    1838:	54 e4       	ldi	r21, 0x44	; 68
    183a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8e a7       	std	Y+46, r24	; 0x2e
    1844:	9f a7       	std	Y+47, r25	; 0x2f
    1846:	a8 ab       	std	Y+48, r26	; 0x30
    1848:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    184a:	6e a5       	ldd	r22, Y+46	; 0x2e
    184c:	7f a5       	ldd	r23, Y+47	; 0x2f
    184e:	88 a9       	ldd	r24, Y+48	; 0x30
    1850:	99 a9       	ldd	r25, Y+49	; 0x31
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e8       	ldi	r20, 0x80	; 128
    1858:	5f e3       	ldi	r21, 0x3F	; 63
    185a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    185e:	88 23       	and	r24, r24
    1860:	2c f4       	brge	.+10     	; 0x186c <LCD_initial+0x270>
		__ticks = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9d a7       	std	Y+45, r25	; 0x2d
    1868:	8c a7       	std	Y+44, r24	; 0x2c
    186a:	3f c0       	rjmp	.+126    	; 0x18ea <LCD_initial+0x2ee>
	else if (__tmp > 65535)
    186c:	6e a5       	ldd	r22, Y+46	; 0x2e
    186e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1870:	88 a9       	ldd	r24, Y+48	; 0x30
    1872:	99 a9       	ldd	r25, Y+49	; 0x31
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	4f e7       	ldi	r20, 0x7F	; 127
    187a:	57 e4       	ldi	r21, 0x47	; 71
    187c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1880:	18 16       	cp	r1, r24
    1882:	4c f5       	brge	.+82     	; 0x18d6 <LCD_initial+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	6a a9       	ldd	r22, Y+50	; 0x32
    1886:	7b a9       	ldd	r23, Y+51	; 0x33
    1888:	8c a9       	ldd	r24, Y+52	; 0x34
    188a:	9d a9       	ldd	r25, Y+53	; 0x35
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e2       	ldi	r20, 0x20	; 32
    1892:	51 e4       	ldi	r21, 0x41	; 65
    1894:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9d a7       	std	Y+45, r25	; 0x2d
    18aa:	8c a7       	std	Y+44, r24	; 0x2c
    18ac:	0f c0       	rjmp	.+30     	; 0x18cc <LCD_initial+0x2d0>
    18ae:	88 ec       	ldi	r24, 0xC8	; 200
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9b a7       	std	Y+43, r25	; 0x2b
    18b4:	8a a7       	std	Y+42, r24	; 0x2a
    18b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    18b8:	9b a5       	ldd	r25, Y+43	; 0x2b
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <LCD_initial+0x2be>
    18be:	9b a7       	std	Y+43, r25	; 0x2b
    18c0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c2:	8c a5       	ldd	r24, Y+44	; 0x2c
    18c4:	9d a5       	ldd	r25, Y+45	; 0x2d
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	9d a7       	std	Y+45, r25	; 0x2d
    18ca:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    18ce:	9d a5       	ldd	r25, Y+45	; 0x2d
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	69 f7       	brne	.-38     	; 0x18ae <LCD_initial+0x2b2>
    18d4:	24 c0       	rjmp	.+72     	; 0x191e <LCD_initial+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d6:	6e a5       	ldd	r22, Y+46	; 0x2e
    18d8:	7f a5       	ldd	r23, Y+47	; 0x2f
    18da:	88 a9       	ldd	r24, Y+48	; 0x30
    18dc:	99 a9       	ldd	r25, Y+49	; 0x31
    18de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9d a7       	std	Y+45, r25	; 0x2d
    18e8:	8c a7       	std	Y+44, r24	; 0x2c
    18ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    18ec:	9d a5       	ldd	r25, Y+45	; 0x2d
    18ee:	99 a7       	std	Y+41, r25	; 0x29
    18f0:	88 a7       	std	Y+40, r24	; 0x28
    18f2:	88 a5       	ldd	r24, Y+40	; 0x28
    18f4:	99 a5       	ldd	r25, Y+41	; 0x29
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <LCD_initial+0x2fa>
    18fa:	99 a7       	std	Y+41, r25	; 0x29
    18fc:	88 a7       	std	Y+40, r24	; 0x28
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <LCD_initial+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1900:	6f a9       	ldd	r22, Y+55	; 0x37
    1902:	78 ad       	ldd	r23, Y+56	; 0x38
    1904:	89 ad       	ldd	r24, Y+57	; 0x39
    1906:	9a ad       	ldd	r25, Y+58	; 0x3a
    1908:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8e ab       	std	Y+54, r24	; 0x36
    1912:	8e a9       	ldd	r24, Y+54	; 0x36
    1914:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1916:	8f a1       	ldd	r24, Y+39	; 0x27
    1918:	8a 95       	dec	r24
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_initial+0x31c>
    191c:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(50);
    LCD_write_cmd(0b00001100);
    191e:	8c e0       	ldi	r24, 0x0C	; 12
    1920:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_write_cmd>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a8 e4       	ldi	r26, 0x48	; 72
    192a:	b2 e4       	ldi	r27, 0x42	; 66
    192c:	8b a3       	std	Y+35, r24	; 0x23
    192e:	9c a3       	std	Y+36, r25	; 0x24
    1930:	ad a3       	std	Y+37, r26	; 0x25
    1932:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1934:	6b a1       	ldd	r22, Y+35	; 0x23
    1936:	7c a1       	ldd	r23, Y+36	; 0x24
    1938:	8d a1       	ldd	r24, Y+37	; 0x25
    193a:	9e a1       	ldd	r25, Y+38	; 0x26
    193c:	2b ea       	ldi	r18, 0xAB	; 171
    193e:	3a ea       	ldi	r19, 0xAA	; 170
    1940:	4a e2       	ldi	r20, 0x2A	; 42
    1942:	50 e4       	ldi	r21, 0x40	; 64
    1944:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8f 8f       	std	Y+31, r24	; 0x1f
    194e:	98 a3       	std	Y+32, r25	; 0x20
    1950:	a9 a3       	std	Y+33, r26	; 0x21
    1952:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1954:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1956:	78 a1       	ldd	r23, Y+32	; 0x20
    1958:	89 a1       	ldd	r24, Y+33	; 0x21
    195a:	9a a1       	ldd	r25, Y+34	; 0x22
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1968:	88 23       	and	r24, r24
    196a:	1c f4       	brge	.+6      	; 0x1972 <LCD_initial+0x376>
		__ticks = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	8e 8f       	std	Y+30, r24	; 0x1e
    1970:	91 c0       	rjmp	.+290    	; 0x1a94 <LCD_initial+0x498>
	else if (__tmp > 255)
    1972:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1974:	78 a1       	ldd	r23, Y+32	; 0x20
    1976:	89 a1       	ldd	r24, Y+33	; 0x21
    1978:	9a a1       	ldd	r25, Y+34	; 0x22
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	53 e4       	ldi	r21, 0x43	; 67
    1982:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1986:	18 16       	cp	r1, r24
    1988:	0c f0       	brlt	.+2      	; 0x198c <LCD_initial+0x390>
    198a:	7b c0       	rjmp	.+246    	; 0x1a82 <LCD_initial+0x486>
	{
		_delay_ms(__us / 1000.0);
    198c:	6b a1       	ldd	r22, Y+35	; 0x23
    198e:	7c a1       	ldd	r23, Y+36	; 0x24
    1990:	8d a1       	ldd	r24, Y+37	; 0x25
    1992:	9e a1       	ldd	r25, Y+38	; 0x26
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a e7       	ldi	r20, 0x7A	; 122
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	8a 8f       	std	Y+26, r24	; 0x1a
    19a6:	9b 8f       	std	Y+27, r25	; 0x1b
    19a8:	ac 8f       	std	Y+28, r26	; 0x1c
    19aa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a ef       	ldi	r20, 0xFA	; 250
    19ba:	54 e4       	ldi	r21, 0x44	; 68
    19bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8e 8b       	std	Y+22, r24	; 0x16
    19c6:	9f 8b       	std	Y+23, r25	; 0x17
    19c8:	a8 8f       	std	Y+24, r26	; 0x18
    19ca:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    19cc:	6e 89       	ldd	r22, Y+22	; 0x16
    19ce:	7f 89       	ldd	r23, Y+23	; 0x17
    19d0:	88 8d       	ldd	r24, Y+24	; 0x18
    19d2:	99 8d       	ldd	r25, Y+25	; 0x19
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e8       	ldi	r20, 0x80	; 128
    19da:	5f e3       	ldi	r21, 0x3F	; 63
    19dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	2c f4       	brge	.+10     	; 0x19ee <LCD_initial+0x3f2>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9d 8b       	std	Y+21, r25	; 0x15
    19ea:	8c 8b       	std	Y+20, r24	; 0x14
    19ec:	3f c0       	rjmp	.+126    	; 0x1a6c <LCD_initial+0x470>
	else if (__tmp > 65535)
    19ee:	6e 89       	ldd	r22, Y+22	; 0x16
    19f0:	7f 89       	ldd	r23, Y+23	; 0x17
    19f2:	88 8d       	ldd	r24, Y+24	; 0x18
    19f4:	99 8d       	ldd	r25, Y+25	; 0x19
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	4c f5       	brge	.+82     	; 0x1a58 <LCD_initial+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a08:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9d 8b       	std	Y+21, r25	; 0x15
    1a2c:	8c 8b       	std	Y+20, r24	; 0x14
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <LCD_initial+0x452>
    1a30:	88 ec       	ldi	r24, 0xC8	; 200
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9b 8b       	std	Y+19, r25	; 0x13
    1a36:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a38:	8a 89       	ldd	r24, Y+18	; 0x12
    1a3a:	9b 89       	ldd	r25, Y+19	; 0x13
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_initial+0x440>
    1a40:	9b 8b       	std	Y+19, r25	; 0x13
    1a42:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a44:	8c 89       	ldd	r24, Y+20	; 0x14
    1a46:	9d 89       	ldd	r25, Y+21	; 0x15
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	9d 8b       	std	Y+21, r25	; 0x15
    1a4c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4e:	8c 89       	ldd	r24, Y+20	; 0x14
    1a50:	9d 89       	ldd	r25, Y+21	; 0x15
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <LCD_initial+0x434>
    1a56:	24 c0       	rjmp	.+72     	; 0x1aa0 <LCD_initial+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	6e 89       	ldd	r22, Y+22	; 0x16
    1a5a:	7f 89       	ldd	r23, Y+23	; 0x17
    1a5c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a5e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9d 8b       	std	Y+21, r25	; 0x15
    1a6a:	8c 8b       	std	Y+20, r24	; 0x14
    1a6c:	8c 89       	ldd	r24, Y+20	; 0x14
    1a6e:	9d 89       	ldd	r25, Y+21	; 0x15
    1a70:	99 8b       	std	Y+17, r25	; 0x11
    1a72:	88 8b       	std	Y+16, r24	; 0x10
    1a74:	88 89       	ldd	r24, Y+16	; 0x10
    1a76:	99 89       	ldd	r25, Y+17	; 0x11
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_initial+0x47c>
    1a7c:	99 8b       	std	Y+17, r25	; 0x11
    1a7e:	88 8b       	std	Y+16, r24	; 0x10
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <LCD_initial+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a82:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a84:	78 a1       	ldd	r23, Y+32	; 0x20
    1a86:	89 a1       	ldd	r24, Y+33	; 0x21
    1a88:	9a a1       	ldd	r25, Y+34	; 0x22
    1a8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	8e 8f       	std	Y+30, r24	; 0x1e
    1a94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a96:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9a:	8a 95       	dec	r24
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_initial+0x49e>
    1a9e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(50);
    LCD_write_cmd(0b00000001);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_write_cmd>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a0 e0       	ldi	r26, 0x00	; 0
    1aac:	b0 e4       	ldi	r27, 0x40	; 64
    1aae:	8b 87       	std	Y+11, r24	; 0x0b
    1ab0:	9c 87       	std	Y+12, r25	; 0x0c
    1ab2:	ad 87       	std	Y+13, r26	; 0x0d
    1ab4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a ef       	ldi	r20, 0xFA	; 250
    1ac4:	54 e4       	ldi	r21, 0x44	; 68
    1ac6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	8f 83       	std	Y+7, r24	; 0x07
    1ad0:	98 87       	std	Y+8, r25	; 0x08
    1ad2:	a9 87       	std	Y+9, r26	; 0x09
    1ad4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad8:	78 85       	ldd	r23, Y+8	; 0x08
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <LCD_initial+0x4fc>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <LCD_initial+0x57a>
	else if (__tmp > 65535)
    1af8:	6f 81       	ldd	r22, Y+7	; 0x07
    1afa:	78 85       	ldd	r23, Y+8	; 0x08
    1afc:	89 85       	ldd	r24, Y+9	; 0x09
    1afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <LCD_initial+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <LCD_initial+0x55c>
    1b3a:	88 ec       	ldi	r24, 0xC8	; 200
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <LCD_initial+0x54a>
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <LCD_initial+0x53e>
    1b60:	14 c0       	rjmp	.+40     	; 0x1b8a <LCD_initial+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_initial+0x586>
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    1b8a:	c4 5b       	subi	r28, 0xB4	; 180
    1b8c:	df 4f       	sbci	r29, 0xFF	; 255
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	08 95       	ret

00001ba2 <LCD_write_string>:

// write string
void LCD_write_string(const char * string)
{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <LCD_write_string+0x6>
    1ba8:	0f 92       	push	r0
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9b 83       	std	Y+3, r25	; 0x03
    1bb0:	8a 83       	std	Y+2, r24	; 0x02
	U8 counter=0;
    1bb2:	19 82       	std	Y+1, r1	; 0x01
    1bb4:	0e c0       	rjmp	.+28     	; 0x1bd2 <LCD_write_string+0x30>
	while(string[counter] != '\0')
	{
		LCD_write_data(string[counter]);
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	e2 0f       	add	r30, r18
    1bc4:	f3 1f       	adc	r31, r19
    1bc6:	80 81       	ld	r24, Z
    1bc8:	0e 94 39 0a 	call	0x1472	; 0x1472 <LCD_write_data>
		counter++;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	8f 5f       	subi	r24, 0xFF	; 255
    1bd0:	89 83       	std	Y+1, r24	; 0x01

// write string
void LCD_write_string(const char * string)
{
	U8 counter=0;
	while(string[counter] != '\0')
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	9b 81       	ldd	r25, Y+3	; 0x03
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 1f       	adc	r31, r19
    1be2:	80 81       	ld	r24, Z
    1be4:	88 23       	and	r24, r24
    1be6:	39 f7       	brne	.-50     	; 0x1bb6 <LCD_write_string+0x14>
	{
		LCD_write_data(string[counter]);
		counter++;
	}
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <LCD_pose_x_y>:

//shifting string possition

U8 LCD_pose_x_y(U8 x_pose,U8 y_pose)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <LCD_pose_x_y+0x6>
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <LCD_pose_x_y+0x8>
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	8b 83       	std	Y+3, r24	; 0x03
    1c02:	6c 83       	std	Y+4, r22	; 0x04
	U8 local_adress;
	U8 error_state=0;
    1c04:	19 82       	std	Y+1, r1	; 0x01
	if((x_pose<2)&& (y_pose<16))
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	82 30       	cpi	r24, 0x02	; 2
    1c0a:	a0 f4       	brcc	.+40     	; 0x1c34 <LCD_pose_x_y+0x40>
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	80 31       	cpi	r24, 0x10	; 16
    1c10:	88 f4       	brcc	.+34     	; 0x1c34 <LCD_pose_x_y+0x40>
	{
	 if(x_pose==0)
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	88 23       	and	r24, r24
    1c16:	19 f4       	brne	.+6      	; 0x1c1e <LCD_pose_x_y+0x2a>
	  {
       //location at first line
		local_adress = y_pose;
    1c18:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1a:	8a 83       	std	Y+2, r24	; 0x02
    1c1c:	06 c0       	rjmp	.+12     	; 0x1c2a <LCD_pose_x_y+0x36>
	   }
	else if(x_pose ==1)
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	19 f4       	brne	.+6      	; 0x1c2a <LCD_pose_x_y+0x36>
	  {
	  	//location at second line
		local_adress= y_pose + 0x40;
    1c24:	8c 81       	ldd	r24, Y+4	; 0x04
    1c26:	80 5c       	subi	r24, 0xC0	; 192
    1c28:	8a 83       	std	Y+2, r24	; 0x02
	  }
	LCD_write_cmd(local_adress+128);
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	80 58       	subi	r24, 0x80	; 128
    1c2e:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_write_cmd>
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <LCD_pose_x_y+0x44>
	}
	else
	{
		error_state=1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	89 83       	std	Y+1, r24	; 0x01
	}
	 return error_state;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <LCD_write_special_character>:

void LCD_write_special_character(U8 *pattern,U8 pattern_number,U8 x_pose,U8 y_pose)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	27 97       	sbiw	r28, 0x07	; 7
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	9c 83       	std	Y+4, r25	; 0x04
    1c5e:	8b 83       	std	Y+3, r24	; 0x03
    1c60:	6d 83       	std	Y+5, r22	; 0x05
    1c62:	4e 83       	std	Y+6, r20	; 0x06
    1c64:	2f 83       	std	Y+7, r18	; 0x07
U8 local_CGRAMADDRESS = 0;
    1c66:	1a 82       	std	Y+2, r1	; 0x02
U8 iterator;

//calculate the CGRAM address whose each block 8 bytes
local_CGRAMADDRESS = pattern_number*8;
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	8a 83       	std	Y+2, r24	; 0x02
LCD_write_cmd(local_CGRAMADDRESS+64);
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	80 5c       	subi	r24, 0xC0	; 192
    1c80:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_write_cmd>

// write pattern in CGRAM
for(iterator = 0;iterator<8;iterator++)
    1c84:	19 82       	std	Y+1, r1	; 0x01
    1c86:	0e c0       	rjmp	.+28     	; 0x1ca4 <LCD_write_special_character+0x5c>
{
	 LCD_write_data(pattern[iterator]);
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	fc 01       	movw	r30, r24
    1c94:	e2 0f       	add	r30, r18
    1c96:	f3 1f       	adc	r31, r19
    1c98:	80 81       	ld	r24, Z
    1c9a:	0e 94 39 0a 	call	0x1472	; 0x1472 <LCD_write_data>
//calculate the CGRAM address whose each block 8 bytes
local_CGRAMADDRESS = pattern_number*8;
LCD_write_cmd(local_CGRAMADDRESS+64);

// write pattern in CGRAM
for(iterator = 0;iterator<8;iterator++)
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	8f 5f       	subi	r24, 0xFF	; 255
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	88 30       	cpi	r24, 0x08	; 8
    1ca8:	78 f3       	brcs	.-34     	; 0x1c88 <LCD_write_special_character+0x40>
{
	 LCD_write_data(pattern[iterator]);

}
//go back to DDRAM to display patter
LCD_pose_x_y(x_pose,y_pose);
    1caa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <LCD_pose_x_y>


//display the pattern write in CGRAM
LCD_write_data(pattern_number);
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	0e 94 39 0a 	call	0x1472	; 0x1472 <LCD_write_data>
}
    1cb8:	27 96       	adiw	r28, 0x07	; 7
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <LCD_clear>:

//function to clear the lcd
void LCD_clear(void)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
	LCD_write_cmd(0b00000001);
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_write_cmd>
}
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <LCD_write_no>:




void LCD_write_no(U32 num){
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	af 97       	sbiw	r28, 0x2f	; 47
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	6c a7       	std	Y+44, r22	; 0x2c
    1cf4:	7d a7       	std	Y+45, r23	; 0x2d
    1cf6:	8e a7       	std	Y+46, r24	; 0x2e
    1cf8:	9f a7       	std	Y+47, r25	; 0x2f
	U8 rem,arr_index=0;
    1cfa:	1a 82       	std	Y+2, r1	; 0x02
	U8 length = 0;
    1cfc:	19 82       	std	Y+1, r1	; 0x01
	U8 str[20];
	U8 str_2[20];
	if(num==0){
    1cfe:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d00:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d02:	ae a5       	ldd	r26, Y+46	; 0x2e
    1d04:	bf a5       	ldd	r27, Y+47	; 0x2f
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	a1 05       	cpc	r26, r1
    1d0a:	b1 05       	cpc	r27, r1
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <LCD_write_no+0x32>
    1d0e:	41 c0       	rjmp	.+130    	; 0x1d92 <LCD_write_no+0xb4>
		str[arr_index]='0';
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	ce 01       	movw	r24, r28
    1d18:	04 96       	adiw	r24, 0x04	; 4
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	e2 0f       	add	r30, r18
    1d1e:	f3 1f       	adc	r31, r19
    1d20:	80 e3       	ldi	r24, 0x30	; 48
    1d22:	80 83       	st	Z, r24
		arr_index++;
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	8a 83       	std	Y+2, r24	; 0x02
    1d2a:	49 c0       	rjmp	.+146    	; 0x1dbe <LCD_write_no+0xe0>
	}
	else{
		while(num!=0){
	rem=num%10;
    1d2c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d2e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d30:	ae a5       	ldd	r26, Y+46	; 0x2e
    1d32:	bf a5       	ldd	r27, Y+47	; 0x2f
    1d34:	2a e0       	ldi	r18, 0x0A	; 10
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	cd 01       	movw	r24, r26
    1d40:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__udivmodsi4>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	8b 83       	std	Y+3, r24	; 0x03
	str[arr_index]=rem+'0';
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	48 2f       	mov	r20, r24
    1d54:	40 5d       	subi	r20, 0xD0	; 208
    1d56:	ce 01       	movw	r24, r28
    1d58:	04 96       	adiw	r24, 0x04	; 4
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	e2 0f       	add	r30, r18
    1d5e:	f3 1f       	adc	r31, r19
    1d60:	40 83       	st	Z, r20
	arr_index++;
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	8f 5f       	subi	r24, 0xFF	; 255
    1d66:	8a 83       	std	Y+2, r24	; 0x02
	num=num/10;
    1d68:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d6a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d6c:	ae a5       	ldd	r26, Y+46	; 0x2e
    1d6e:	bf a5       	ldd	r27, Y+47	; 0x2f
    1d70:	2a e0       	ldi	r18, 0x0A	; 10
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	50 e0       	ldi	r21, 0x00	; 0
    1d78:	bc 01       	movw	r22, r24
    1d7a:	cd 01       	movw	r24, r26
    1d7c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__udivmodsi4>
    1d80:	da 01       	movw	r26, r20
    1d82:	c9 01       	movw	r24, r18
    1d84:	8c a7       	std	Y+44, r24	; 0x2c
    1d86:	9d a7       	std	Y+45, r25	; 0x2d
    1d88:	ae a7       	std	Y+46, r26	; 0x2e
    1d8a:	bf a7       	std	Y+47, r27	; 0x2f
	length++;
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	89 83       	std	Y+1, r24	; 0x01
	if(num==0){
		str[arr_index]='0';
		arr_index++;
	}
	else{
		while(num!=0){
    1d92:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d94:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d96:	ae a5       	ldd	r26, Y+46	; 0x2e
    1d98:	bf a5       	ldd	r27, Y+47	; 0x2f
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	a1 05       	cpc	r26, r1
    1d9e:	b1 05       	cpc	r27, r1
    1da0:	29 f6       	brne	.-118    	; 0x1d2c <LCD_write_no+0x4e>
	str[arr_index]=rem+'0';
	arr_index++;
	num=num/10;
	length++;
	}
		str[arr_index]='\0';
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	ce 01       	movw	r24, r28
    1daa:	04 96       	adiw	r24, 0x04	; 4
    1dac:	fc 01       	movw	r30, r24
    1dae:	e2 0f       	add	r30, r18
    1db0:	f3 1f       	adc	r31, r19
    1db2:	10 82       	st	Z, r1
		reverse(str,length);
    1db4:	ce 01       	movw	r24, r28
    1db6:	04 96       	adiw	r24, 0x04	; 4
    1db8:	69 81       	ldd	r22, Y+1	; 0x01
    1dba:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <reverse>
	}

}
    1dbe:	af 96       	adiw	r28, 0x2f	; 47
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <reverse>:

void reverse(U8 *ptr,U8 length)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <reverse+0x6>
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <reverse+0x8>
    1dd8:	0f 92       	push	r0
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
    1de2:	6d 83       	std	Y+5, r22	; 0x05
  U8 start = 0;
    1de4:	1a 82       	std	Y+2, r1	; 0x02
  U8 end = length-1;
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	81 50       	subi	r24, 0x01	; 1
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	19 c0       	rjmp	.+50     	; 0x1e20 <reverse+0x50>
  while(start<end)
  {

	  swap(&ptr[start],&ptr[end]);
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	ac 01       	movw	r20, r24
    1dfa:	42 0f       	add	r20, r18
    1dfc:	53 1f       	adc	r21, r19
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	28 0f       	add	r18, r24
    1e0a:	39 1f       	adc	r19, r25
    1e0c:	ca 01       	movw	r24, r20
    1e0e:	b9 01       	movw	r22, r18
    1e10:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <swap>
	  start++;
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	8f 5f       	subi	r24, 0xFF	; 255
    1e18:	8a 83       	std	Y+2, r24	; 0x02
	  end--;
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	81 50       	subi	r24, 0x01	; 1
    1e1e:	89 83       	std	Y+1, r24	; 0x01

void reverse(U8 *ptr,U8 length)
{
  U8 start = 0;
  U8 end = length-1;
  while(start<end)
    1e20:	9a 81       	ldd	r25, Y+2	; 0x02
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	98 17       	cp	r25, r24
    1e26:	18 f3       	brcs	.-58     	; 0x1dee <reverse+0x1e>
	  swap(&ptr[start],&ptr[end]);
	  start++;
	  end--;
  }

  LCD_write_string(ptr);
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCD_write_string>
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <swap>:
 void swap(U8 * start, U8 * end)
 {
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <swap+0x6>
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <swap+0x8>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <swap+0xa>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	8b 83       	std	Y+3, r24	; 0x03
    1e52:	7e 83       	std	Y+6, r23	; 0x06
    1e54:	6d 83       	std	Y+5, r22	; 0x05
	 int z=0;
    1e56:	1a 82       	std	Y+2, r1	; 0x02
    1e58:	19 82       	std	Y+1, r1	; 0x01
	 z=*start;
    1e5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	89 83       	std	Y+1, r24	; 0x01
	 *start=*end;
    1e68:	ed 81       	ldd	r30, Y+5	; 0x05
    1e6a:	fe 81       	ldd	r31, Y+6	; 0x06
    1e6c:	80 81       	ld	r24, Z
    1e6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e70:	fc 81       	ldd	r31, Y+4	; 0x04
    1e72:	80 83       	st	Z, r24
     *end=z;
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	ed 81       	ldd	r30, Y+5	; 0x05
    1e78:	fe 81       	ldd	r31, Y+6	; 0x06
    1e7a:	80 83       	st	Z, r24
 }
    1e7c:	26 96       	adiw	r28, 0x06	; 6
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <UART_Init>:
#include"UART_private.h"



void UART_Init(void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    UBRRH = 0b00000000;
    1e96:	e0 e4       	ldi	r30, 0x40	; 64
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	10 82       	st	Z, r1
	UBRRL = 51;
    1e9c:	e9 e2       	ldi	r30, 0x29	; 41
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	83 e3       	ldi	r24, 0x33	; 51
    1ea2:	80 83       	st	Z, r24
	UCSRC = 0b10000110;
    1ea4:	e0 e4       	ldi	r30, 0x40	; 64
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	86 e8       	ldi	r24, 0x86	; 134
    1eaa:	80 83       	st	Z, r24
	UCSRB = 0b00011000;
    1eac:	ea e2       	ldi	r30, 0x2A	; 42
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	88 e1       	ldi	r24, 0x18	; 24
    1eb2:	80 83       	st	Z, r24

}
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <UART_send_character>:


void UART_send_character(U8 data)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01

	while(get_bit(UCSRA,5)==0);
    1ec6:	eb e2       	ldi	r30, 0x2B	; 43
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	82 95       	swap	r24
    1ece:	86 95       	lsr	r24
    1ed0:	87 70       	andi	r24, 0x07	; 7
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	81 70       	andi	r24, 0x01	; 1
    1ed8:	90 70       	andi	r25, 0x00	; 0
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	a1 f3       	breq	.-24     	; 0x1ec6 <UART_send_character+0xc>
	UDR = data;
    1ede:	ec e2       	ldi	r30, 0x2C	; 44
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	80 83       	st	Z, r24
}
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <UART_receive_char>:
U8 UART_receive_char(void)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
 while(get_bit(UCSRA,7)==0);
    1ef6:	eb e2       	ldi	r30, 0x2B	; 43
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	88 23       	and	r24, r24
    1efe:	dc f7       	brge	.-10     	; 0x1ef6 <UART_receive_char+0x8>
 return UDR ;
    1f00:	ec e2       	ldi	r30, 0x2C	; 44
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
}
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <UART_send_string>:

void UART_send_string(U8 *str)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <UART_send_string+0x6>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	0a c0       	rjmp	.+20     	; 0x1f30 <UART_send_string+0x24>
	while(*str !='\0')
	{
		UART_send_character(*str);
    1f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f20:	80 81       	ld	r24, Z
    1f22:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <UART_send_character>
		str++;
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	9a 83       	std	Y+2, r25	; 0x02
    1f2e:	89 83       	std	Y+1, r24	; 0x01
 return UDR ;
}

void UART_send_string(U8 *str)
{
	while(*str !='\0')
    1f30:	e9 81       	ldd	r30, Y+1	; 0x01
    1f32:	fa 81       	ldd	r31, Y+2	; 0x02
    1f34:	80 81       	ld	r24, Z
    1f36:	88 23       	and	r24, r24
    1f38:	89 f7       	brne	.-30     	; 0x1f1c <UART_send_string+0x10>
	{
		UART_send_character(*str);
		str++;
	}
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <UART_receive_string>:


void UART_receive_string(U8 *str)
{
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <UART_receive_string+0xa>
    1f4e:	0f 92       	push	r0
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9b 83       	std	Y+3, r25	; 0x03
    1f56:	8a 83       	std	Y+2, r24	; 0x02
	U8 i=0;
    1f58:	19 82       	std	Y+1, r1	; 0x01
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <UART_receive_string+0x36>
	while(i<8)
	{
	    str[i]=UART_receive_char();
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	9b 81       	ldd	r25, Y+3	; 0x03
    1f66:	8c 01       	movw	r16, r24
    1f68:	02 0f       	add	r16, r18
    1f6a:	13 1f       	adc	r17, r19
    1f6c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <UART_receive_char>
    1f70:	f8 01       	movw	r30, r16
    1f72:	80 83       	st	Z, r24
		i++;
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	8f 5f       	subi	r24, 0xFF	; 255
    1f78:	89 83       	std	Y+1, r24	; 0x01


void UART_receive_string(U8 *str)
{
	U8 i=0;
	while(i<8)
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	88 30       	cpi	r24, 0x08	; 8
    1f7e:	70 f3       	brcs	.-36     	; 0x1f5c <UART_receive_string+0x18>
	{
	    str[i]=UART_receive_char();
		i++;
	}
    str[i]='\0';
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	e2 0f       	add	r30, r18
    1f8e:	f3 1f       	adc	r31, r19
    1f90:	10 82       	st	Z, r1
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <main>:
#include"ADC_interface.h"
#include"LCD_interface.h"
#include"UART_interface.h"

void main(void)
{
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	cb 58       	subi	r28, 0x8B	; 139
    1fb0:	d0 40       	sbci	r29, 0x00	; 0
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    // TX AND RX INITIALIZE AND FUNCTION UART INIT
	DIO_set_pin_direction(Group_D,DIO_pin_D0,DIO_Input);
    1fbc:	83 e0       	ldi	r24, 0x03	; 3
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_set_pin_direction>
	DIO_set_pin_direction(Group_D,DIO_pin_D1,DIO_Output);
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	61 e0       	ldi	r22, 0x01	; 1
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_set_pin_direction>
	DIO_set_pin_direction(Group_D,DIO_pin_D3,DIO_Output);
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	63 e0       	ldi	r22, 0x03	; 3
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_set_pin_direction>
	UART_Init();
    1fda:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_Init>
	U8 arr1[4] = {'o','n','e','\0'};
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e3 5a       	subi	r30, 0xA3	; 163
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	8f e6       	ldi	r24, 0x6F	; 111
    1fe6:	80 83       	st	Z, r24
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e3 5a       	subi	r30, 0xA3	; 163
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	8e e6       	ldi	r24, 0x6E	; 110
    1ff0:	81 83       	std	Z+1, r24	; 0x01
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e3 5a       	subi	r30, 0xA3	; 163
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	85 e6       	ldi	r24, 0x65	; 101
    1ffa:	82 83       	std	Z+2, r24	; 0x02
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e3 5a       	subi	r30, 0xA3	; 163
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	13 82       	std	Z+3, r1	; 0x03
	U8 arr2[4] = {'t','w','o','\0'};
    2004:	fe 01       	movw	r30, r28
    2006:	ef 59       	subi	r30, 0x9F	; 159
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	84 e7       	ldi	r24, 0x74	; 116
    200c:	80 83       	st	Z, r24
    200e:	fe 01       	movw	r30, r28
    2010:	ef 59       	subi	r30, 0x9F	; 159
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	87 e7       	ldi	r24, 0x77	; 119
    2016:	81 83       	std	Z+1, r24	; 0x01
    2018:	fe 01       	movw	r30, r28
    201a:	ef 59       	subi	r30, 0x9F	; 159
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	8f e6       	ldi	r24, 0x6F	; 111
    2020:	82 83       	std	Z+2, r24	; 0x02
    2022:	fe 01       	movw	r30, r28
    2024:	ef 59       	subi	r30, 0x9F	; 159
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	13 82       	std	Z+3, r1	; 0x03
	U8 arr3[7] = {'c','i','r','c','l','e','\0'};
    202a:	ce 01       	movw	r24, r28
    202c:	8b 59       	subi	r24, 0x9B	; 155
    202e:	9f 4f       	sbci	r25, 0xFF	; 255
    2030:	ef 96       	adiw	r28, 0x3f	; 63
    2032:	9f af       	std	Y+63, r25	; 0x3f
    2034:	8e af       	std	Y+62, r24	; 0x3e
    2036:	ef 97       	sbiw	r28, 0x3f	; 63
    2038:	89 e7       	ldi	r24, 0x79	; 121
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	c1 58       	subi	r28, 0x81	; 129
    203e:	df 4f       	sbci	r29, 0xFF	; 255
    2040:	99 83       	std	Y+1, r25	; 0x01
    2042:	88 83       	st	Y, r24
    2044:	cf 57       	subi	r28, 0x7F	; 127
    2046:	d0 40       	sbci	r29, 0x00	; 0
    2048:	97 e0       	ldi	r25, 0x07	; 7
    204a:	cf 57       	subi	r28, 0x7F	; 127
    204c:	df 4f       	sbci	r29, 0xFF	; 255
    204e:	98 83       	st	Y, r25
    2050:	c1 58       	subi	r28, 0x81	; 129
    2052:	d0 40       	sbci	r29, 0x00	; 0
    2054:	c1 58       	subi	r28, 0x81	; 129
    2056:	df 4f       	sbci	r29, 0xFF	; 255
    2058:	e8 81       	ld	r30, Y
    205a:	f9 81       	ldd	r31, Y+1	; 0x01
    205c:	cf 57       	subi	r28, 0x7F	; 127
    205e:	d0 40       	sbci	r29, 0x00	; 0
    2060:	00 80       	ld	r0, Z
    2062:	c1 58       	subi	r28, 0x81	; 129
    2064:	df 4f       	sbci	r29, 0xFF	; 255
    2066:	88 81       	ld	r24, Y
    2068:	99 81       	ldd	r25, Y+1	; 0x01
    206a:	cf 57       	subi	r28, 0x7F	; 127
    206c:	d0 40       	sbci	r29, 0x00	; 0
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	c1 58       	subi	r28, 0x81	; 129
    2072:	df 4f       	sbci	r29, 0xFF	; 255
    2074:	99 83       	std	Y+1, r25	; 0x01
    2076:	88 83       	st	Y, r24
    2078:	cf 57       	subi	r28, 0x7F	; 127
    207a:	d0 40       	sbci	r29, 0x00	; 0
    207c:	ef 96       	adiw	r28, 0x3f	; 63
    207e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2080:	ff ad       	ldd	r31, Y+63	; 0x3f
    2082:	ef 97       	sbiw	r28, 0x3f	; 63
    2084:	00 82       	st	Z, r0
    2086:	ef 96       	adiw	r28, 0x3f	; 63
    2088:	8e ad       	ldd	r24, Y+62	; 0x3e
    208a:	9f ad       	ldd	r25, Y+63	; 0x3f
    208c:	ef 97       	sbiw	r28, 0x3f	; 63
    208e:	01 96       	adiw	r24, 0x01	; 1
    2090:	ef 96       	adiw	r28, 0x3f	; 63
    2092:	9f af       	std	Y+63, r25	; 0x3f
    2094:	8e af       	std	Y+62, r24	; 0x3e
    2096:	ef 97       	sbiw	r28, 0x3f	; 63
    2098:	cf 57       	subi	r28, 0x7F	; 127
    209a:	df 4f       	sbci	r29, 0xFF	; 255
    209c:	98 81       	ld	r25, Y
    209e:	c1 58       	subi	r28, 0x81	; 129
    20a0:	d0 40       	sbci	r29, 0x00	; 0
    20a2:	91 50       	subi	r25, 0x01	; 1
    20a4:	cf 57       	subi	r28, 0x7F	; 127
    20a6:	df 4f       	sbci	r29, 0xFF	; 255
    20a8:	98 83       	st	Y, r25
    20aa:	c1 58       	subi	r28, 0x81	; 129
    20ac:	d0 40       	sbci	r29, 0x00	; 0
    20ae:	cf 57       	subi	r28, 0x7F	; 127
    20b0:	df 4f       	sbci	r29, 0xFF	; 255
    20b2:	e8 81       	ld	r30, Y
    20b4:	c1 58       	subi	r28, 0x81	; 129
    20b6:	d0 40       	sbci	r29, 0x00	; 0
    20b8:	ee 23       	and	r30, r30
    20ba:	61 f6       	brne	.-104    	; 0x2054 <main+0xb2>
	U8 arr4[11] = {'i','a','m',' ','h','u','n','g','r','y','\0'};
    20bc:	ce 01       	movw	r24, r28
    20be:	84 59       	subi	r24, 0x94	; 148
    20c0:	9f 4f       	sbci	r25, 0xFF	; 255
    20c2:	ce 57       	subi	r28, 0x7E	; 126
    20c4:	df 4f       	sbci	r29, 0xFF	; 255
    20c6:	99 83       	std	Y+1, r25	; 0x01
    20c8:	88 83       	st	Y, r24
    20ca:	c2 58       	subi	r28, 0x82	; 130
    20cc:	d0 40       	sbci	r29, 0x00	; 0
    20ce:	8e e6       	ldi	r24, 0x6E	; 110
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	cc 57       	subi	r28, 0x7C	; 124
    20d4:	df 4f       	sbci	r29, 0xFF	; 255
    20d6:	99 83       	std	Y+1, r25	; 0x01
    20d8:	88 83       	st	Y, r24
    20da:	c4 58       	subi	r28, 0x84	; 132
    20dc:	d0 40       	sbci	r29, 0x00	; 0
    20de:	9b e0       	ldi	r25, 0x0B	; 11
    20e0:	ca 57       	subi	r28, 0x7A	; 122
    20e2:	df 4f       	sbci	r29, 0xFF	; 255
    20e4:	98 83       	st	Y, r25
    20e6:	c6 58       	subi	r28, 0x86	; 134
    20e8:	d0 40       	sbci	r29, 0x00	; 0
    20ea:	cc 57       	subi	r28, 0x7C	; 124
    20ec:	df 4f       	sbci	r29, 0xFF	; 255
    20ee:	e8 81       	ld	r30, Y
    20f0:	f9 81       	ldd	r31, Y+1	; 0x01
    20f2:	c4 58       	subi	r28, 0x84	; 132
    20f4:	d0 40       	sbci	r29, 0x00	; 0
    20f6:	00 80       	ld	r0, Z
    20f8:	cc 57       	subi	r28, 0x7C	; 124
    20fa:	df 4f       	sbci	r29, 0xFF	; 255
    20fc:	88 81       	ld	r24, Y
    20fe:	99 81       	ldd	r25, Y+1	; 0x01
    2100:	c4 58       	subi	r28, 0x84	; 132
    2102:	d0 40       	sbci	r29, 0x00	; 0
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	cc 57       	subi	r28, 0x7C	; 124
    2108:	df 4f       	sbci	r29, 0xFF	; 255
    210a:	99 83       	std	Y+1, r25	; 0x01
    210c:	88 83       	st	Y, r24
    210e:	c4 58       	subi	r28, 0x84	; 132
    2110:	d0 40       	sbci	r29, 0x00	; 0
    2112:	ce 57       	subi	r28, 0x7E	; 126
    2114:	df 4f       	sbci	r29, 0xFF	; 255
    2116:	e8 81       	ld	r30, Y
    2118:	f9 81       	ldd	r31, Y+1	; 0x01
    211a:	c2 58       	subi	r28, 0x82	; 130
    211c:	d0 40       	sbci	r29, 0x00	; 0
    211e:	00 82       	st	Z, r0
    2120:	ce 57       	subi	r28, 0x7E	; 126
    2122:	df 4f       	sbci	r29, 0xFF	; 255
    2124:	88 81       	ld	r24, Y
    2126:	99 81       	ldd	r25, Y+1	; 0x01
    2128:	c2 58       	subi	r28, 0x82	; 130
    212a:	d0 40       	sbci	r29, 0x00	; 0
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	ce 57       	subi	r28, 0x7E	; 126
    2130:	df 4f       	sbci	r29, 0xFF	; 255
    2132:	99 83       	std	Y+1, r25	; 0x01
    2134:	88 83       	st	Y, r24
    2136:	c2 58       	subi	r28, 0x82	; 130
    2138:	d0 40       	sbci	r29, 0x00	; 0
    213a:	ca 57       	subi	r28, 0x7A	; 122
    213c:	df 4f       	sbci	r29, 0xFF	; 255
    213e:	98 81       	ld	r25, Y
    2140:	c6 58       	subi	r28, 0x86	; 134
    2142:	d0 40       	sbci	r29, 0x00	; 0
    2144:	91 50       	subi	r25, 0x01	; 1
    2146:	ca 57       	subi	r28, 0x7A	; 122
    2148:	df 4f       	sbci	r29, 0xFF	; 255
    214a:	98 83       	st	Y, r25
    214c:	c6 58       	subi	r28, 0x86	; 134
    214e:	d0 40       	sbci	r29, 0x00	; 0
    2150:	ca 57       	subi	r28, 0x7A	; 122
    2152:	df 4f       	sbci	r29, 0xFF	; 255
    2154:	e8 81       	ld	r30, Y
    2156:	c6 58       	subi	r28, 0x86	; 134
    2158:	d0 40       	sbci	r29, 0x00	; 0
    215a:	ee 23       	and	r30, r30
    215c:	31 f6       	brne	.-116    	; 0x20ea <main+0x148>
	U8 arr5[6] = {'r','a','b','i','t','\0'};
    215e:	ce 01       	movw	r24, r28
    2160:	89 58       	subi	r24, 0x89	; 137
    2162:	9f 4f       	sbci	r25, 0xFF	; 255
    2164:	c9 57       	subi	r28, 0x79	; 121
    2166:	df 4f       	sbci	r29, 0xFF	; 255
    2168:	99 83       	std	Y+1, r25	; 0x01
    216a:	88 83       	st	Y, r24
    216c:	c7 58       	subi	r28, 0x87	; 135
    216e:	d0 40       	sbci	r29, 0x00	; 0
    2170:	88 e6       	ldi	r24, 0x68	; 104
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	c7 57       	subi	r28, 0x77	; 119
    2176:	df 4f       	sbci	r29, 0xFF	; 255
    2178:	99 83       	std	Y+1, r25	; 0x01
    217a:	88 83       	st	Y, r24
    217c:	c9 58       	subi	r28, 0x89	; 137
    217e:	d0 40       	sbci	r29, 0x00	; 0
    2180:	96 e0       	ldi	r25, 0x06	; 6
    2182:	c5 57       	subi	r28, 0x75	; 117
    2184:	df 4f       	sbci	r29, 0xFF	; 255
    2186:	98 83       	st	Y, r25
    2188:	cb 58       	subi	r28, 0x8B	; 139
    218a:	d0 40       	sbci	r29, 0x00	; 0
    218c:	c7 57       	subi	r28, 0x77	; 119
    218e:	df 4f       	sbci	r29, 0xFF	; 255
    2190:	e8 81       	ld	r30, Y
    2192:	f9 81       	ldd	r31, Y+1	; 0x01
    2194:	c9 58       	subi	r28, 0x89	; 137
    2196:	d0 40       	sbci	r29, 0x00	; 0
    2198:	00 80       	ld	r0, Z
    219a:	c7 57       	subi	r28, 0x77	; 119
    219c:	df 4f       	sbci	r29, 0xFF	; 255
    219e:	88 81       	ld	r24, Y
    21a0:	99 81       	ldd	r25, Y+1	; 0x01
    21a2:	c9 58       	subi	r28, 0x89	; 137
    21a4:	d0 40       	sbci	r29, 0x00	; 0
    21a6:	01 96       	adiw	r24, 0x01	; 1
    21a8:	c7 57       	subi	r28, 0x77	; 119
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
    21ac:	99 83       	std	Y+1, r25	; 0x01
    21ae:	88 83       	st	Y, r24
    21b0:	c9 58       	subi	r28, 0x89	; 137
    21b2:	d0 40       	sbci	r29, 0x00	; 0
    21b4:	c9 57       	subi	r28, 0x79	; 121
    21b6:	df 4f       	sbci	r29, 0xFF	; 255
    21b8:	e8 81       	ld	r30, Y
    21ba:	f9 81       	ldd	r31, Y+1	; 0x01
    21bc:	c7 58       	subi	r28, 0x87	; 135
    21be:	d0 40       	sbci	r29, 0x00	; 0
    21c0:	00 82       	st	Z, r0
    21c2:	c9 57       	subi	r28, 0x79	; 121
    21c4:	df 4f       	sbci	r29, 0xFF	; 255
    21c6:	88 81       	ld	r24, Y
    21c8:	99 81       	ldd	r25, Y+1	; 0x01
    21ca:	c7 58       	subi	r28, 0x87	; 135
    21cc:	d0 40       	sbci	r29, 0x00	; 0
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	c9 57       	subi	r28, 0x79	; 121
    21d2:	df 4f       	sbci	r29, 0xFF	; 255
    21d4:	99 83       	std	Y+1, r25	; 0x01
    21d6:	88 83       	st	Y, r24
    21d8:	c7 58       	subi	r28, 0x87	; 135
    21da:	d0 40       	sbci	r29, 0x00	; 0
    21dc:	c5 57       	subi	r28, 0x75	; 117
    21de:	df 4f       	sbci	r29, 0xFF	; 255
    21e0:	98 81       	ld	r25, Y
    21e2:	cb 58       	subi	r28, 0x8B	; 139
    21e4:	d0 40       	sbci	r29, 0x00	; 0
    21e6:	91 50       	subi	r25, 0x01	; 1
    21e8:	c5 57       	subi	r28, 0x75	; 117
    21ea:	df 4f       	sbci	r29, 0xFF	; 255
    21ec:	98 83       	st	Y, r25
    21ee:	cb 58       	subi	r28, 0x8B	; 139
    21f0:	d0 40       	sbci	r29, 0x00	; 0
    21f2:	c5 57       	subi	r28, 0x75	; 117
    21f4:	df 4f       	sbci	r29, 0xFF	; 255
    21f6:	e8 81       	ld	r30, Y
    21f8:	cb 58       	subi	r28, 0x8B	; 139
    21fa:	d0 40       	sbci	r29, 0x00	; 0
    21fc:	ee 23       	and	r30, r30
    21fe:	31 f6       	brne	.-116    	; 0x218c <main+0x1ea>
	//first and second FLEX sensor defination
	    U32 digital_1;
        U32 digital_2;

	    //for First flex pin
		DIO_set_pin_direction(Group_A,DIO_pin_A7, DIO_Input);
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	67 e0       	ldi	r22, 0x07	; 7
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_set_pin_direction>

		//FOR second flex pin
		DIO_set_pin_direction(Group_A,DIO_pin_A6, DIO_Input);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	66 e0       	ldi	r22, 0x06	; 6
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_set_pin_direction>
	    ADC_init();
    2214:	0e 94 47 06 	call	0xc8e	; 0xc8e <ADC_init>
	    LCD_initial();
    2218:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <LCD_initial>

	    while(1)
	    {
	    	//for First flex DEFINATION AND SHOW ON LCD
	    	digital_1 =ADC_ChannelReading(7);
    221c:	87 e0       	ldi	r24, 0x07	; 7
    221e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <ADC_ChannelReading>
    2222:	fe 01       	movw	r30, r28
    2224:	e7 5a       	subi	r30, 0xA7	; 167
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	88 2f       	mov	r24, r24
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a0 e0       	ldi	r26, 0x00	; 0
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	80 83       	st	Z, r24
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	a2 83       	std	Z+2, r26	; 0x02
    2236:	b3 83       	std	Z+3, r27	; 0x03
	    	//LCD_write_no(digital_1);

	    	// for second flex show in LCD
	    	 digital_2 =ADC_ChannelReading(6);
    2238:	86 e0       	ldi	r24, 0x06	; 6
    223a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <ADC_ChannelReading>
    223e:	fe 01       	movw	r30, r28
    2240:	eb 5a       	subi	r30, 0xAB	; 171
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e0       	ldi	r26, 0x00	; 0
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	80 83       	st	Z, r24
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	a2 83       	std	Z+2, r26	; 0x02
    2252:	b3 83       	std	Z+3, r27	; 0x03

	    	 //LCD_pose_x_y(1,0);
	    	 //LCD_write_no(digital_2);

            if((digital_1>=140)  &&(digital_2<=90 ))
    2254:	fe 01       	movw	r30, r28
    2256:	e7 5a       	subi	r30, 0xA7	; 167
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	a2 81       	ldd	r26, Z+2	; 0x02
    2260:	b3 81       	ldd	r27, Z+3	; 0x03
    2262:	8c 38       	cpi	r24, 0x8C	; 140
    2264:	91 05       	cpc	r25, r1
    2266:	a1 05       	cpc	r26, r1
    2268:	b1 05       	cpc	r27, r1
    226a:	08 f4       	brcc	.+2      	; 0x226e <main+0x2cc>
    226c:	cc c0       	rjmp	.+408    	; 0x2406 <main+0x464>
    226e:	fe 01       	movw	r30, r28
    2270:	eb 5a       	subi	r30, 0xAB	; 171
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	a2 81       	ldd	r26, Z+2	; 0x02
    227a:	b3 81       	ldd	r27, Z+3	; 0x03
    227c:	8b 35       	cpi	r24, 0x5B	; 91
    227e:	91 05       	cpc	r25, r1
    2280:	a1 05       	cpc	r26, r1
    2282:	b1 05       	cpc	r27, r1
    2284:	08 f0       	brcs	.+2      	; 0x2288 <main+0x2e6>
    2286:	bf c0       	rjmp	.+382    	; 0x2406 <main+0x464>
            {
            	UART_send_string(arr1);
    2288:	ce 01       	movw	r24, r28
    228a:	83 5a       	subi	r24, 0xA3	; 163
    228c:	9f 4f       	sbci	r25, 0xFF	; 255
    228e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <UART_send_string>
            	//LCD_pose_x_y(1,10);
            	LCD_write_string(arr1);
    2292:	ce 01       	movw	r24, r28
    2294:	83 5a       	subi	r24, 0xA3	; 163
    2296:	9f 4f       	sbci	r25, 0xFF	; 255
    2298:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCD_write_string>
    229c:	fe 01       	movw	r30, r28
    229e:	ef 5a       	subi	r30, 0xAF	; 175
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	aa e7       	ldi	r26, 0x7A	; 122
    22a8:	b4 e4       	ldi	r27, 0x44	; 68
    22aa:	80 83       	st	Z, r24
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	a2 83       	std	Z+2, r26	; 0x02
    22b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	8e 01       	movw	r16, r28
    22b4:	03 5b       	subi	r16, 0xB3	; 179
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	fe 01       	movw	r30, r28
    22ba:	ef 5a       	subi	r30, 0xAF	; 175
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a ef       	ldi	r20, 0xFA	; 250
    22cc:	54 e4       	ldi	r21, 0x44	; 68
    22ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	f8 01       	movw	r30, r16
    22d8:	80 83       	st	Z, r24
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	a2 83       	std	Z+2, r26	; 0x02
    22de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22e0:	fe 01       	movw	r30, r28
    22e2:	e3 5b       	subi	r30, 0xB3	; 179
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e8       	ldi	r20, 0x80	; 128
    22f4:	5f e3       	ldi	r21, 0x3F	; 63
    22f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	44 f4       	brge	.+16     	; 0x230e <main+0x36c>
		__ticks = 1;
    22fe:	fe 01       	movw	r30, r28
    2300:	e5 5b       	subi	r30, 0xB5	; 181
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	80 83       	st	Z, r24
    230c:	64 c0       	rjmp	.+200    	; 0x23d6 <main+0x434>
	else if (__tmp > 65535)
    230e:	fe 01       	movw	r30, r28
    2310:	e3 5b       	subi	r30, 0xB3	; 179
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	0c f0       	brlt	.+2      	; 0x232e <main+0x38c>
    232c:	43 c0       	rjmp	.+134    	; 0x23b4 <main+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232e:	fe 01       	movw	r30, r28
    2330:	ef 5a       	subi	r30, 0xAF	; 175
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e2       	ldi	r20, 0x20	; 32
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8e 01       	movw	r16, r28
    234e:	05 5b       	subi	r16, 0xB5	; 181
    2350:	1f 4f       	sbci	r17, 0xFF	; 255
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	f8 01       	movw	r30, r16
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	80 83       	st	Z, r24
    2364:	1f c0       	rjmp	.+62     	; 0x23a4 <main+0x402>
    2366:	fe 01       	movw	r30, r28
    2368:	e7 5b       	subi	r30, 0xB7	; 183
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	88 ec       	ldi	r24, 0xC8	; 200
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	91 83       	std	Z+1, r25	; 0x01
    2372:	80 83       	st	Z, r24
    2374:	fe 01       	movw	r30, r28
    2376:	e7 5b       	subi	r30, 0xB7	; 183
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <main+0x3dc>
    2382:	fe 01       	movw	r30, r28
    2384:	e7 5b       	subi	r30, 0xB7	; 183
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	de 01       	movw	r26, r28
    238e:	a5 5b       	subi	r26, 0xB5	; 181
    2390:	bf 4f       	sbci	r27, 0xFF	; 255
    2392:	fe 01       	movw	r30, r28
    2394:	e5 5b       	subi	r30, 0xB5	; 181
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	11 96       	adiw	r26, 0x01	; 1
    23a0:	9c 93       	st	X, r25
    23a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a4:	fe 01       	movw	r30, r28
    23a6:	e5 5b       	subi	r30, 0xB5	; 181
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	d1 f6       	brne	.-76     	; 0x2366 <main+0x3c4>
    23b2:	d8 c2       	rjmp	.+1456   	; 0x2964 <main+0x9c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b4:	8e 01       	movw	r16, r28
    23b6:	05 5b       	subi	r16, 0xB5	; 181
    23b8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ba:	fe 01       	movw	r30, r28
    23bc:	e3 5b       	subi	r30, 0xB3	; 179
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	60 81       	ld	r22, Z
    23c2:	71 81       	ldd	r23, Z+1	; 0x01
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	f8 01       	movw	r30, r16
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	de 01       	movw	r26, r28
    23d8:	a9 5b       	subi	r26, 0xB9	; 185
    23da:	bf 4f       	sbci	r27, 0xFF	; 255
    23dc:	fe 01       	movw	r30, r28
    23de:	e5 5b       	subi	r30, 0xB5	; 181
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	11 96       	adiw	r26, 0x01	; 1
    23e8:	9c 93       	st	X, r25
    23ea:	8e 93       	st	-X, r24
    23ec:	fe 01       	movw	r30, r28
    23ee:	e9 5b       	subi	r30, 0xB9	; 185
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <main+0x454>
    23fa:	fe 01       	movw	r30, r28
    23fc:	e9 5b       	subi	r30, 0xB9	; 185
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	af c2       	rjmp	.+1374   	; 0x2964 <main+0x9c2>
            	_delay_ms(1000);

            }
            else if((digital_1>=140) && (digital_2>=130))
    2406:	fe 01       	movw	r30, r28
    2408:	e7 5a       	subi	r30, 0xA7	; 167
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	a2 81       	ldd	r26, Z+2	; 0x02
    2412:	b3 81       	ldd	r27, Z+3	; 0x03
    2414:	8c 38       	cpi	r24, 0x8C	; 140
    2416:	91 05       	cpc	r25, r1
    2418:	a1 05       	cpc	r26, r1
    241a:	b1 05       	cpc	r27, r1
    241c:	08 f4       	brcc	.+2      	; 0x2420 <main+0x47e>
    241e:	9d c0       	rjmp	.+314    	; 0x255a <main+0x5b8>
    2420:	fe 01       	movw	r30, r28
    2422:	eb 5a       	subi	r30, 0xAB	; 171
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	a2 81       	ldd	r26, Z+2	; 0x02
    242c:	b3 81       	ldd	r27, Z+3	; 0x03
    242e:	82 38       	cpi	r24, 0x82	; 130
    2430:	91 05       	cpc	r25, r1
    2432:	a1 05       	cpc	r26, r1
    2434:	b1 05       	cpc	r27, r1
    2436:	08 f4       	brcc	.+2      	; 0x243a <main+0x498>
    2438:	90 c0       	rjmp	.+288    	; 0x255a <main+0x5b8>
            {
            	UART_send_string(arr2);
    243a:	ce 01       	movw	r24, r28
    243c:	8f 59       	subi	r24, 0x9F	; 159
    243e:	9f 4f       	sbci	r25, 0xFF	; 255
    2440:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <UART_send_string>
            	//LCD_pose_x_y(1,10);
                LCD_write_string(arr2);
    2444:	ce 01       	movw	r24, r28
    2446:	8f 59       	subi	r24, 0x9F	; 159
    2448:	9f 4f       	sbci	r25, 0xFF	; 255
    244a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCD_write_string>
    244e:	fe 01       	movw	r30, r28
    2450:	ed 5b       	subi	r30, 0xBD	; 189
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	aa e7       	ldi	r26, 0x7A	; 122
    245a:	b4 e4       	ldi	r27, 0x44	; 68
    245c:	80 83       	st	Z, r24
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	a2 83       	std	Z+2, r26	; 0x02
    2462:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2464:	8e 01       	movw	r16, r28
    2466:	01 5c       	subi	r16, 0xC1	; 193
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	fe 01       	movw	r30, r28
    246c:	ed 5b       	subi	r30, 0xBD	; 189
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4a ef       	ldi	r20, 0xFA	; 250
    247e:	54 e4       	ldi	r21, 0x44	; 68
    2480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	f8 01       	movw	r30, r16
    248a:	80 83       	st	Z, r24
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	a2 83       	std	Z+2, r26	; 0x02
    2490:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2492:	fe 01       	movw	r30, r28
    2494:	ff 96       	adiw	r30, 0x3f	; 63
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e8       	ldi	r20, 0x80	; 128
    24a4:	5f e3       	ldi	r21, 0x3F	; 63
    24a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <main+0x516>
		__ticks = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9e af       	std	Y+62, r25	; 0x3e
    24b4:	8d af       	std	Y+61, r24	; 0x3d
    24b6:	46 c0       	rjmp	.+140    	; 0x2544 <main+0x5a2>
	else if (__tmp > 65535)
    24b8:	fe 01       	movw	r30, r28
    24ba:	ff 96       	adiw	r30, 0x3f	; 63
    24bc:	60 81       	ld	r22, Z
    24be:	71 81       	ldd	r23, Z+1	; 0x01
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	3f ef       	ldi	r19, 0xFF	; 255
    24c8:	4f e7       	ldi	r20, 0x7F	; 127
    24ca:	57 e4       	ldi	r21, 0x47	; 71
    24cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24d0:	18 16       	cp	r1, r24
    24d2:	64 f5       	brge	.+88     	; 0x252c <main+0x58a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d4:	fe 01       	movw	r30, r28
    24d6:	ed 5b       	subi	r30, 0xBD	; 189
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e2       	ldi	r20, 0x20	; 32
    24e8:	51 e4       	ldi	r21, 0x41	; 65
    24ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9e af       	std	Y+62, r25	; 0x3e
    2500:	8d af       	std	Y+61, r24	; 0x3d
    2502:	0f c0       	rjmp	.+30     	; 0x2522 <main+0x580>
    2504:	88 ec       	ldi	r24, 0xC8	; 200
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9c af       	std	Y+60, r25	; 0x3c
    250a:	8b af       	std	Y+59, r24	; 0x3b
    250c:	8b ad       	ldd	r24, Y+59	; 0x3b
    250e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <main+0x56e>
    2514:	9c af       	std	Y+60, r25	; 0x3c
    2516:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	8d ad       	ldd	r24, Y+61	; 0x3d
    251a:	9e ad       	ldd	r25, Y+62	; 0x3e
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	9e af       	std	Y+62, r25	; 0x3e
    2520:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2522:	8d ad       	ldd	r24, Y+61	; 0x3d
    2524:	9e ad       	ldd	r25, Y+62	; 0x3e
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f7       	brne	.-38     	; 0x2504 <main+0x562>
    252a:	1c c2       	rjmp	.+1080   	; 0x2964 <main+0x9c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252c:	fe 01       	movw	r30, r28
    252e:	ff 96       	adiw	r30, 0x3f	; 63
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9e af       	std	Y+62, r25	; 0x3e
    2542:	8d af       	std	Y+61, r24	; 0x3d
    2544:	8d ad       	ldd	r24, Y+61	; 0x3d
    2546:	9e ad       	ldd	r25, Y+62	; 0x3e
    2548:	9a af       	std	Y+58, r25	; 0x3a
    254a:	89 af       	std	Y+57, r24	; 0x39
    254c:	89 ad       	ldd	r24, Y+57	; 0x39
    254e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <main+0x5ae>
    2554:	9a af       	std	Y+58, r25	; 0x3a
    2556:	89 af       	std	Y+57, r24	; 0x39
    2558:	05 c2       	rjmp	.+1034   	; 0x2964 <main+0x9c2>
            	_delay_ms(1000);
            }

            else if(((digital_1>=85)&&(digital_1<=115)) && ((digital_2>=80)&&(digital_2<=100)))
    255a:	fe 01       	movw	r30, r28
    255c:	e7 5a       	subi	r30, 0xA7	; 167
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	91 81       	ldd	r25, Z+1	; 0x01
    2564:	a2 81       	ldd	r26, Z+2	; 0x02
    2566:	b3 81       	ldd	r27, Z+3	; 0x03
    2568:	85 35       	cpi	r24, 0x55	; 85
    256a:	91 05       	cpc	r25, r1
    256c:	a1 05       	cpc	r26, r1
    256e:	b1 05       	cpc	r27, r1
    2570:	08 f4       	brcc	.+2      	; 0x2574 <main+0x5d2>
    2572:	a4 c0       	rjmp	.+328    	; 0x26bc <main+0x71a>
    2574:	fe 01       	movw	r30, r28
    2576:	e7 5a       	subi	r30, 0xA7	; 167
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	a2 81       	ldd	r26, Z+2	; 0x02
    2580:	b3 81       	ldd	r27, Z+3	; 0x03
    2582:	84 37       	cpi	r24, 0x74	; 116
    2584:	91 05       	cpc	r25, r1
    2586:	a1 05       	cpc	r26, r1
    2588:	b1 05       	cpc	r27, r1
    258a:	08 f0       	brcs	.+2      	; 0x258e <main+0x5ec>
    258c:	97 c0       	rjmp	.+302    	; 0x26bc <main+0x71a>
    258e:	fe 01       	movw	r30, r28
    2590:	eb 5a       	subi	r30, 0xAB	; 171
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	a2 81       	ldd	r26, Z+2	; 0x02
    259a:	b3 81       	ldd	r27, Z+3	; 0x03
    259c:	80 35       	cpi	r24, 0x50	; 80
    259e:	91 05       	cpc	r25, r1
    25a0:	a1 05       	cpc	r26, r1
    25a2:	b1 05       	cpc	r27, r1
    25a4:	08 f4       	brcc	.+2      	; 0x25a8 <main+0x606>
    25a6:	8a c0       	rjmp	.+276    	; 0x26bc <main+0x71a>
    25a8:	fe 01       	movw	r30, r28
    25aa:	eb 5a       	subi	r30, 0xAB	; 171
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	a2 81       	ldd	r26, Z+2	; 0x02
    25b4:	b3 81       	ldd	r27, Z+3	; 0x03
    25b6:	85 36       	cpi	r24, 0x65	; 101
    25b8:	91 05       	cpc	r25, r1
    25ba:	a1 05       	cpc	r26, r1
    25bc:	b1 05       	cpc	r27, r1
    25be:	08 f0       	brcs	.+2      	; 0x25c2 <main+0x620>
    25c0:	7d c0       	rjmp	.+250    	; 0x26bc <main+0x71a>
                {
            	UART_send_string(arr3);
    25c2:	ce 01       	movw	r24, r28
    25c4:	8b 59       	subi	r24, 0x9B	; 155
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <UART_send_string>
            	//LCD_pose_x_y(1,10);
                LCD_write_string(arr3);
    25cc:	ce 01       	movw	r24, r28
    25ce:	8b 59       	subi	r24, 0x9B	; 155
    25d0:	9f 4f       	sbci	r25, 0xFF	; 255
    25d2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCD_write_string>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	aa e7       	ldi	r26, 0x7A	; 122
    25dc:	b4 e4       	ldi	r27, 0x44	; 68
    25de:	8d ab       	std	Y+53, r24	; 0x35
    25e0:	9e ab       	std	Y+54, r25	; 0x36
    25e2:	af ab       	std	Y+55, r26	; 0x37
    25e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	6d a9       	ldd	r22, Y+53	; 0x35
    25e8:	7e a9       	ldd	r23, Y+54	; 0x36
    25ea:	8f a9       	ldd	r24, Y+55	; 0x37
    25ec:	98 ad       	ldd	r25, Y+56	; 0x38
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a ef       	ldi	r20, 0xFA	; 250
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	89 ab       	std	Y+49, r24	; 0x31
    2600:	9a ab       	std	Y+50, r25	; 0x32
    2602:	ab ab       	std	Y+51, r26	; 0x33
    2604:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2606:	69 a9       	ldd	r22, Y+49	; 0x31
    2608:	7a a9       	ldd	r23, Y+50	; 0x32
    260a:	8b a9       	ldd	r24, Y+51	; 0x33
    260c:	9c a9       	ldd	r25, Y+52	; 0x34
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <main+0x686>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	98 ab       	std	Y+48, r25	; 0x30
    2624:	8f a7       	std	Y+47, r24	; 0x2f
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <main+0x704>
	else if (__tmp > 65535)
    2628:	69 a9       	ldd	r22, Y+49	; 0x31
    262a:	7a a9       	ldd	r23, Y+50	; 0x32
    262c:	8b a9       	ldd	r24, Y+51	; 0x33
    262e:	9c a9       	ldd	r25, Y+52	; 0x34
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <main+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	6d a9       	ldd	r22, Y+53	; 0x35
    2642:	7e a9       	ldd	r23, Y+54	; 0x36
    2644:	8f a9       	ldd	r24, Y+55	; 0x37
    2646:	98 ad       	ldd	r25, Y+56	; 0x38
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	98 ab       	std	Y+48, r25	; 0x30
    2666:	8f a7       	std	Y+47, r24	; 0x2f
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <main+0x6e6>
    266a:	88 ec       	ldi	r24, 0xC8	; 200
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9e a7       	std	Y+46, r25	; 0x2e
    2670:	8d a7       	std	Y+45, r24	; 0x2d
    2672:	8d a5       	ldd	r24, Y+45	; 0x2d
    2674:	9e a5       	ldd	r25, Y+46	; 0x2e
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <main+0x6d4>
    267a:	9e a7       	std	Y+46, r25	; 0x2e
    267c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2680:	98 a9       	ldd	r25, Y+48	; 0x30
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	98 ab       	std	Y+48, r25	; 0x30
    2686:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	8f a5       	ldd	r24, Y+47	; 0x2f
    268a:	98 a9       	ldd	r25, Y+48	; 0x30
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	69 f7       	brne	.-38     	; 0x266a <main+0x6c8>
    2690:	69 c1       	rjmp	.+722    	; 0x2964 <main+0x9c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	69 a9       	ldd	r22, Y+49	; 0x31
    2694:	7a a9       	ldd	r23, Y+50	; 0x32
    2696:	8b a9       	ldd	r24, Y+51	; 0x33
    2698:	9c a9       	ldd	r25, Y+52	; 0x34
    269a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	98 ab       	std	Y+48, r25	; 0x30
    26a4:	8f a7       	std	Y+47, r24	; 0x2f
    26a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a8:	98 a9       	ldd	r25, Y+48	; 0x30
    26aa:	9c a7       	std	Y+44, r25	; 0x2c
    26ac:	8b a7       	std	Y+43, r24	; 0x2b
    26ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <main+0x710>
    26b6:	9c a7       	std	Y+44, r25	; 0x2c
    26b8:	8b a7       	std	Y+43, r24	; 0x2b
    26ba:	54 c1       	rjmp	.+680    	; 0x2964 <main+0x9c2>
            	_delay_ms(1000);
                }

            else if(((digital_1>=145)) &&((digital_2>=100) &&(digital_2<=125)))
    26bc:	fe 01       	movw	r30, r28
    26be:	e7 5a       	subi	r30, 0xA7	; 167
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	a2 81       	ldd	r26, Z+2	; 0x02
    26c8:	b3 81       	ldd	r27, Z+3	; 0x03
    26ca:	81 39       	cpi	r24, 0x91	; 145
    26cc:	91 05       	cpc	r25, r1
    26ce:	a1 05       	cpc	r26, r1
    26d0:	b1 05       	cpc	r27, r1
    26d2:	08 f4       	brcc	.+2      	; 0x26d6 <main+0x734>
    26d4:	97 c0       	rjmp	.+302    	; 0x2804 <main+0x862>
    26d6:	fe 01       	movw	r30, r28
    26d8:	eb 5a       	subi	r30, 0xAB	; 171
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	a2 81       	ldd	r26, Z+2	; 0x02
    26e2:	b3 81       	ldd	r27, Z+3	; 0x03
    26e4:	84 36       	cpi	r24, 0x64	; 100
    26e6:	91 05       	cpc	r25, r1
    26e8:	a1 05       	cpc	r26, r1
    26ea:	b1 05       	cpc	r27, r1
    26ec:	08 f4       	brcc	.+2      	; 0x26f0 <main+0x74e>
    26ee:	8a c0       	rjmp	.+276    	; 0x2804 <main+0x862>
    26f0:	fe 01       	movw	r30, r28
    26f2:	eb 5a       	subi	r30, 0xAB	; 171
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	a2 81       	ldd	r26, Z+2	; 0x02
    26fc:	b3 81       	ldd	r27, Z+3	; 0x03
    26fe:	8e 37       	cpi	r24, 0x7E	; 126
    2700:	91 05       	cpc	r25, r1
    2702:	a1 05       	cpc	r26, r1
    2704:	b1 05       	cpc	r27, r1
    2706:	08 f0       	brcs	.+2      	; 0x270a <main+0x768>
    2708:	7d c0       	rjmp	.+250    	; 0x2804 <main+0x862>
                {
            	UART_send_string(arr4);
    270a:	ce 01       	movw	r24, r28
    270c:	84 59       	subi	r24, 0x94	; 148
    270e:	9f 4f       	sbci	r25, 0xFF	; 255
    2710:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <UART_send_string>
            	//LCD_pose_x_y(1,3);
                LCD_write_string(arr4);
    2714:	ce 01       	movw	r24, r28
    2716:	84 59       	subi	r24, 0x94	; 148
    2718:	9f 4f       	sbci	r25, 0xFF	; 255
    271a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCD_write_string>
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	aa e7       	ldi	r26, 0x7A	; 122
    2724:	b4 e4       	ldi	r27, 0x44	; 68
    2726:	8f a3       	std	Y+39, r24	; 0x27
    2728:	98 a7       	std	Y+40, r25	; 0x28
    272a:	a9 a7       	std	Y+41, r26	; 0x29
    272c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272e:	6f a1       	ldd	r22, Y+39	; 0x27
    2730:	78 a5       	ldd	r23, Y+40	; 0x28
    2732:	89 a5       	ldd	r24, Y+41	; 0x29
    2734:	9a a5       	ldd	r25, Y+42	; 0x2a
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	4a ef       	ldi	r20, 0xFA	; 250
    273c:	54 e4       	ldi	r21, 0x44	; 68
    273e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	8b a3       	std	Y+35, r24	; 0x23
    2748:	9c a3       	std	Y+36, r25	; 0x24
    274a:	ad a3       	std	Y+37, r26	; 0x25
    274c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    274e:	6b a1       	ldd	r22, Y+35	; 0x23
    2750:	7c a1       	ldd	r23, Y+36	; 0x24
    2752:	8d a1       	ldd	r24, Y+37	; 0x25
    2754:	9e a1       	ldd	r25, Y+38	; 0x26
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e8       	ldi	r20, 0x80	; 128
    275c:	5f e3       	ldi	r21, 0x3F	; 63
    275e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2762:	88 23       	and	r24, r24
    2764:	2c f4       	brge	.+10     	; 0x2770 <main+0x7ce>
		__ticks = 1;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	9a a3       	std	Y+34, r25	; 0x22
    276c:	89 a3       	std	Y+33, r24	; 0x21
    276e:	3f c0       	rjmp	.+126    	; 0x27ee <main+0x84c>
	else if (__tmp > 65535)
    2770:	6b a1       	ldd	r22, Y+35	; 0x23
    2772:	7c a1       	ldd	r23, Y+36	; 0x24
    2774:	8d a1       	ldd	r24, Y+37	; 0x25
    2776:	9e a1       	ldd	r25, Y+38	; 0x26
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	3f ef       	ldi	r19, 0xFF	; 255
    277c:	4f e7       	ldi	r20, 0x7F	; 127
    277e:	57 e4       	ldi	r21, 0x47	; 71
    2780:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2784:	18 16       	cp	r1, r24
    2786:	4c f5       	brge	.+82     	; 0x27da <main+0x838>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2788:	6f a1       	ldd	r22, Y+39	; 0x27
    278a:	78 a5       	ldd	r23, Y+40	; 0x28
    278c:	89 a5       	ldd	r24, Y+41	; 0x29
    278e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e2       	ldi	r20, 0x20	; 32
    2796:	51 e4       	ldi	r21, 0x41	; 65
    2798:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	9a a3       	std	Y+34, r25	; 0x22
    27ae:	89 a3       	std	Y+33, r24	; 0x21
    27b0:	0f c0       	rjmp	.+30     	; 0x27d0 <main+0x82e>
    27b2:	88 ec       	ldi	r24, 0xC8	; 200
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	98 a3       	std	Y+32, r25	; 0x20
    27b8:	8f 8f       	std	Y+31, r24	; 0x1f
    27ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27bc:	98 a1       	ldd	r25, Y+32	; 0x20
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <main+0x81c>
    27c2:	98 a3       	std	Y+32, r25	; 0x20
    27c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c6:	89 a1       	ldd	r24, Y+33	; 0x21
    27c8:	9a a1       	ldd	r25, Y+34	; 0x22
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	9a a3       	std	Y+34, r25	; 0x22
    27ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d0:	89 a1       	ldd	r24, Y+33	; 0x21
    27d2:	9a a1       	ldd	r25, Y+34	; 0x22
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	69 f7       	brne	.-38     	; 0x27b2 <main+0x810>
    27d8:	c5 c0       	rjmp	.+394    	; 0x2964 <main+0x9c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27da:	6b a1       	ldd	r22, Y+35	; 0x23
    27dc:	7c a1       	ldd	r23, Y+36	; 0x24
    27de:	8d a1       	ldd	r24, Y+37	; 0x25
    27e0:	9e a1       	ldd	r25, Y+38	; 0x26
    27e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	9a a3       	std	Y+34, r25	; 0x22
    27ec:	89 a3       	std	Y+33, r24	; 0x21
    27ee:	89 a1       	ldd	r24, Y+33	; 0x21
    27f0:	9a a1       	ldd	r25, Y+34	; 0x22
    27f2:	9e 8f       	std	Y+30, r25	; 0x1e
    27f4:	8d 8f       	std	Y+29, r24	; 0x1d
    27f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <main+0x858>
    27fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2800:	8d 8f       	std	Y+29, r24	; 0x1d
    2802:	b0 c0       	rjmp	.+352    	; 0x2964 <main+0x9c2>
            	_delay_ms(1000);
                }

            else if(((digital_1>=120)&&(digital_1<140)) && ((digital_2>=100)&&(digital_2<120)))
    2804:	fe 01       	movw	r30, r28
    2806:	e7 5a       	subi	r30, 0xA7	; 167
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	a2 81       	ldd	r26, Z+2	; 0x02
    2810:	b3 81       	ldd	r27, Z+3	; 0x03
    2812:	88 37       	cpi	r24, 0x78	; 120
    2814:	91 05       	cpc	r25, r1
    2816:	a1 05       	cpc	r26, r1
    2818:	b1 05       	cpc	r27, r1
    281a:	08 f4       	brcc	.+2      	; 0x281e <main+0x87c>
    281c:	a3 c0       	rjmp	.+326    	; 0x2964 <main+0x9c2>
    281e:	fe 01       	movw	r30, r28
    2820:	e7 5a       	subi	r30, 0xA7	; 167
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	a2 81       	ldd	r26, Z+2	; 0x02
    282a:	b3 81       	ldd	r27, Z+3	; 0x03
    282c:	8c 38       	cpi	r24, 0x8C	; 140
    282e:	91 05       	cpc	r25, r1
    2830:	a1 05       	cpc	r26, r1
    2832:	b1 05       	cpc	r27, r1
    2834:	08 f0       	brcs	.+2      	; 0x2838 <main+0x896>
    2836:	96 c0       	rjmp	.+300    	; 0x2964 <main+0x9c2>
    2838:	fe 01       	movw	r30, r28
    283a:	eb 5a       	subi	r30, 0xAB	; 171
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 81       	ld	r24, Z
    2840:	91 81       	ldd	r25, Z+1	; 0x01
    2842:	a2 81       	ldd	r26, Z+2	; 0x02
    2844:	b3 81       	ldd	r27, Z+3	; 0x03
    2846:	84 36       	cpi	r24, 0x64	; 100
    2848:	91 05       	cpc	r25, r1
    284a:	a1 05       	cpc	r26, r1
    284c:	b1 05       	cpc	r27, r1
    284e:	08 f4       	brcc	.+2      	; 0x2852 <main+0x8b0>
    2850:	89 c0       	rjmp	.+274    	; 0x2964 <main+0x9c2>
    2852:	fe 01       	movw	r30, r28
    2854:	eb 5a       	subi	r30, 0xAB	; 171
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	a2 81       	ldd	r26, Z+2	; 0x02
    285e:	b3 81       	ldd	r27, Z+3	; 0x03
    2860:	88 37       	cpi	r24, 0x78	; 120
    2862:	91 05       	cpc	r25, r1
    2864:	a1 05       	cpc	r26, r1
    2866:	b1 05       	cpc	r27, r1
    2868:	08 f0       	brcs	.+2      	; 0x286c <main+0x8ca>
    286a:	7c c0       	rjmp	.+248    	; 0x2964 <main+0x9c2>
                    {
                	UART_send_string(arr5);
    286c:	ce 01       	movw	r24, r28
    286e:	89 58       	subi	r24, 0x89	; 137
    2870:	9f 4f       	sbci	r25, 0xFF	; 255
    2872:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <UART_send_string>
                	//LCD_pose_x_y(1,10);
                    LCD_write_string(arr5);
    2876:	ce 01       	movw	r24, r28
    2878:	89 58       	subi	r24, 0x89	; 137
    287a:	9f 4f       	sbci	r25, 0xFF	; 255
    287c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCD_write_string>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	aa e7       	ldi	r26, 0x7A	; 122
    2886:	b4 e4       	ldi	r27, 0x44	; 68
    2888:	89 8f       	std	Y+25, r24	; 0x19
    288a:	9a 8f       	std	Y+26, r25	; 0x1a
    288c:	ab 8f       	std	Y+27, r26	; 0x1b
    288e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2890:	69 8d       	ldd	r22, Y+25	; 0x19
    2892:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a ef       	ldi	r20, 0xFA	; 250
    289e:	54 e4       	ldi	r21, 0x44	; 68
    28a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	8d 8b       	std	Y+21, r24	; 0x15
    28aa:	9e 8b       	std	Y+22, r25	; 0x16
    28ac:	af 8b       	std	Y+23, r26	; 0x17
    28ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28b0:	6d 89       	ldd	r22, Y+21	; 0x15
    28b2:	7e 89       	ldd	r23, Y+22	; 0x16
    28b4:	8f 89       	ldd	r24, Y+23	; 0x17
    28b6:	98 8d       	ldd	r25, Y+24	; 0x18
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e8       	ldi	r20, 0x80	; 128
    28be:	5f e3       	ldi	r21, 0x3F	; 63
    28c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28c4:	88 23       	and	r24, r24
    28c6:	2c f4       	brge	.+10     	; 0x28d2 <main+0x930>
		__ticks = 1;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9c 8b       	std	Y+20, r25	; 0x14
    28ce:	8b 8b       	std	Y+19, r24	; 0x13
    28d0:	3f c0       	rjmp	.+126    	; 0x2950 <main+0x9ae>
	else if (__tmp > 65535)
    28d2:	6d 89       	ldd	r22, Y+21	; 0x15
    28d4:	7e 89       	ldd	r23, Y+22	; 0x16
    28d6:	8f 89       	ldd	r24, Y+23	; 0x17
    28d8:	98 8d       	ldd	r25, Y+24	; 0x18
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	4c f5       	brge	.+82     	; 0x293c <main+0x99a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	69 8d       	ldd	r22, Y+25	; 0x19
    28ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9c 8b       	std	Y+20, r25	; 0x14
    2910:	8b 8b       	std	Y+19, r24	; 0x13
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <main+0x990>
    2914:	88 ec       	ldi	r24, 0xC8	; 200
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9a 8b       	std	Y+18, r25	; 0x12
    291a:	89 8b       	std	Y+17, r24	; 0x11
    291c:	89 89       	ldd	r24, Y+17	; 0x11
    291e:	9a 89       	ldd	r25, Y+18	; 0x12
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <main+0x97e>
    2924:	9a 8b       	std	Y+18, r25	; 0x12
    2926:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	8b 89       	ldd	r24, Y+19	; 0x13
    292a:	9c 89       	ldd	r25, Y+20	; 0x14
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	9c 8b       	std	Y+20, r25	; 0x14
    2930:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2932:	8b 89       	ldd	r24, Y+19	; 0x13
    2934:	9c 89       	ldd	r25, Y+20	; 0x14
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	69 f7       	brne	.-38     	; 0x2914 <main+0x972>
    293a:	14 c0       	rjmp	.+40     	; 0x2964 <main+0x9c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293c:	6d 89       	ldd	r22, Y+21	; 0x15
    293e:	7e 89       	ldd	r23, Y+22	; 0x16
    2940:	8f 89       	ldd	r24, Y+23	; 0x17
    2942:	98 8d       	ldd	r25, Y+24	; 0x18
    2944:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9c 8b       	std	Y+20, r25	; 0x14
    294e:	8b 8b       	std	Y+19, r24	; 0x13
    2950:	8b 89       	ldd	r24, Y+19	; 0x13
    2952:	9c 89       	ldd	r25, Y+20	; 0x14
    2954:	98 8b       	std	Y+16, r25	; 0x10
    2956:	8f 87       	std	Y+15, r24	; 0x0f
    2958:	8f 85       	ldd	r24, Y+15	; 0x0f
    295a:	98 89       	ldd	r25, Y+16	; 0x10
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <main+0x9ba>
    2960:	98 8b       	std	Y+16, r25	; 0x10
    2962:	8f 87       	std	Y+15, r24	; 0x0f
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	aa ef       	ldi	r26, 0xFA	; 250
    296a:	b3 e4       	ldi	r27, 0x43	; 67
    296c:	8b 87       	std	Y+11, r24	; 0x0b
    296e:	9c 87       	std	Y+12, r25	; 0x0c
    2970:	ad 87       	std	Y+13, r26	; 0x0d
    2972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a ef       	ldi	r20, 0xFA	; 250
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8f 83       	std	Y+7, r24	; 0x07
    298e:	98 87       	std	Y+8, r25	; 0x08
    2990:	a9 87       	std	Y+9, r26	; 0x09
    2992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <main+0xa14>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <main+0xa92>
	else if (__tmp > 65535)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <main+0xa7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <main+0xa74>
    29f8:	88 ec       	ldi	r24, 0xC8	; 200
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <main+0xa62>
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <main+0xa56>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <main+0xaa6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <main+0xa9e>
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
                	_delay_ms(1000);
                    }

	        _delay_ms(500);
	        LCD_clear();
    2a48:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_clear>
    2a4c:	e7 cb       	rjmp	.-2098   	; 0x221c <main+0x27a>

00002a4e <__udivmodsi4>:
    2a4e:	a1 e2       	ldi	r26, 0x21	; 33
    2a50:	1a 2e       	mov	r1, r26
    2a52:	aa 1b       	sub	r26, r26
    2a54:	bb 1b       	sub	r27, r27
    2a56:	fd 01       	movw	r30, r26
    2a58:	0d c0       	rjmp	.+26     	; 0x2a74 <__udivmodsi4_ep>

00002a5a <__udivmodsi4_loop>:
    2a5a:	aa 1f       	adc	r26, r26
    2a5c:	bb 1f       	adc	r27, r27
    2a5e:	ee 1f       	adc	r30, r30
    2a60:	ff 1f       	adc	r31, r31
    2a62:	a2 17       	cp	r26, r18
    2a64:	b3 07       	cpc	r27, r19
    2a66:	e4 07       	cpc	r30, r20
    2a68:	f5 07       	cpc	r31, r21
    2a6a:	20 f0       	brcs	.+8      	; 0x2a74 <__udivmodsi4_ep>
    2a6c:	a2 1b       	sub	r26, r18
    2a6e:	b3 0b       	sbc	r27, r19
    2a70:	e4 0b       	sbc	r30, r20
    2a72:	f5 0b       	sbc	r31, r21

00002a74 <__udivmodsi4_ep>:
    2a74:	66 1f       	adc	r22, r22
    2a76:	77 1f       	adc	r23, r23
    2a78:	88 1f       	adc	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	1a 94       	dec	r1
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <__udivmodsi4_loop>
    2a80:	60 95       	com	r22
    2a82:	70 95       	com	r23
    2a84:	80 95       	com	r24
    2a86:	90 95       	com	r25
    2a88:	9b 01       	movw	r18, r22
    2a8a:	ac 01       	movw	r20, r24
    2a8c:	bd 01       	movw	r22, r26
    2a8e:	cf 01       	movw	r24, r30
    2a90:	08 95       	ret

00002a92 <__prologue_saves__>:
    2a92:	2f 92       	push	r2
    2a94:	3f 92       	push	r3
    2a96:	4f 92       	push	r4
    2a98:	5f 92       	push	r5
    2a9a:	6f 92       	push	r6
    2a9c:	7f 92       	push	r7
    2a9e:	8f 92       	push	r8
    2aa0:	9f 92       	push	r9
    2aa2:	af 92       	push	r10
    2aa4:	bf 92       	push	r11
    2aa6:	cf 92       	push	r12
    2aa8:	df 92       	push	r13
    2aaa:	ef 92       	push	r14
    2aac:	ff 92       	push	r15
    2aae:	0f 93       	push	r16
    2ab0:	1f 93       	push	r17
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	ca 1b       	sub	r28, r26
    2abc:	db 0b       	sbc	r29, r27
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	09 94       	ijmp

00002aca <__epilogue_restores__>:
    2aca:	2a 88       	ldd	r2, Y+18	; 0x12
    2acc:	39 88       	ldd	r3, Y+17	; 0x11
    2ace:	48 88       	ldd	r4, Y+16	; 0x10
    2ad0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ad2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ad4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ad6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ad8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ada:	aa 84       	ldd	r10, Y+10	; 0x0a
    2adc:	b9 84       	ldd	r11, Y+9	; 0x09
    2ade:	c8 84       	ldd	r12, Y+8	; 0x08
    2ae0:	df 80       	ldd	r13, Y+7	; 0x07
    2ae2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ae4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ae6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ae8:	1b 81       	ldd	r17, Y+3	; 0x03
    2aea:	aa 81       	ldd	r26, Y+2	; 0x02
    2aec:	b9 81       	ldd	r27, Y+1	; 0x01
    2aee:	ce 0f       	add	r28, r30
    2af0:	d1 1d       	adc	r29, r1
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	ed 01       	movw	r28, r26
    2afe:	08 95       	ret

00002b00 <_exit>:
    2b00:	f8 94       	cli

00002b02 <__stop_program>:
    2b02:	ff cf       	rjmp	.-2      	; 0x2b02 <__stop_program>
